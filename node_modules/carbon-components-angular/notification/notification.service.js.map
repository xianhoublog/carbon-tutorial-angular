{"version":3,"file":"notification.service.js","sourceRoot":"","sources":["../src/notification/notification.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tApplicationRef,\n\tComponentFactory,\n\tComponentFactoryResolver,\n\tComponentRef,\n\tEventEmitter,\n\tInjectable,\n\tInjector,\n\tOnDestroy\n} from \"@angular/core\";\n\nimport { NotificationContent, ToastContent } from \"./notification-content.interface\";\nimport { Notification } from \"./notification.component\";\nimport { Toast } from \"./toast.component\";\n\n/**\n * Provides a way to use the notification component.\n *\n * Notifications are displayed toward the top of the UI and do not interrupt the userâ€™s work.\n */\n@Injectable()\nexport class NotificationService implements OnDestroy {\n\t/**\n\t * An array containing `ComponentRef`s to all the notifications this service instance\n\t * is responsible for.\n\t *\n\t */\n\tpublic notificationRefs = new Array<ComponentRef<any>>();\n\tpublic onClose: EventEmitter<any> = new EventEmitter();\n\n\t/**\n\t * Constructs NotificationService.\n\t *\n\t * @param injector\n\t * @param componentFactoryResolver\n\t * @param applicationRef\n\t */\n\tconstructor(\n\t\tprotected injector: Injector,\n\t\tprotected componentFactoryResolver: ComponentFactoryResolver,\n\t\tprotected applicationRef: ApplicationRef) {\n\t}\n\n\t/**\n\t * Shows the notification based on the `notificationObj`.\n\t *\n\t * @param notificationObj Can have `type`, `message`, `target`, `duration` and `smart` members.\n\t *\n\t * **Members:**\n\t *\n\t * * `type` can be one of `\"info\"`, `\"warning\"`, `\"danger\"`, `\"success\"`\n\t * * `message` is message for notification to display\n\t * * `target` is css selector defining an element to append notification to. If not provided,\n\t * `showNotification()` creates a place for the notification in `body`\n\t * * `duration` is number of ms to close the notification after. If used in combination with `smart`,\n\t * it's added to the calculated timeout\n\t * * `smart`, set to `true` if you want to use smart notification.\n\t *\n\t * **Example:**\n\t * ```typescript\n\t * // Info notification, saying \"Sample message.\" added to the element with id notification-container\n\t * // uses smart timeout with added duration of 1 second.\n\t * {\n\t *\ttype: \"info\",\n\t *\tmessage: \"Sample message.\",\n\t *\ttarget: \"#notification-container\",\n\t *\tduration: 1000,\n\t *\tsmart: true\n\t * }\n\t * ```\n\t *\n\t * @param [notificationComp=Notification] If provided, used to resolve component factory\n\t */\n\tshowNotification(notificationObj: NotificationContent | ToastContent, notificationComp = Notification) {\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(notificationComp);\n\n\t\tlet notificationRef = componentFactory.create(this.injector);\n\t\tnotificationRef.instance.notificationObj = notificationObj as any; // typescript isn't being very smart here, so we type to any\n\t\tthis.notificationRefs.push(notificationRef);\n\n\t\tthis.onClose = notificationRef.instance.close;\n\t\tthis.applicationRef.attachView(notificationRef.hostView);\n\n\t\tif (notificationObj.target) {\n\t\t\tdocument.querySelector(notificationObj.target).appendChild(notificationRef.location.nativeElement);\n\t\t} else {\n\t\t\tlet body = document.querySelector(\"body\");\n\n\t\t\t// get or create a container for alert list\n\t\t\tlet notificationClassName = \"notification-overlay\";\n\t\t\tlet notificationList = body.querySelector(`.${notificationClassName}`);\n\t\t\tif (!notificationList) {\n\t\t\t\tnotificationList = document.createElement(\"div\");\n\t\t\t\tnotificationList.className = notificationClassName;\n\t\t\t\tbody.appendChild(notificationList);\n\t\t\t}\n\n\t\t\t// add the notification to the top of the list\n\t\t\tif (notificationList.firstChild) {\n\t\t\t\tnotificationList.insertBefore(notificationRef.location.nativeElement, notificationList.firstChild);\n\t\t\t} else {\n\t\t\t\tnotificationList.appendChild(notificationRef.location.nativeElement);\n\t\t\t}\n\t\t}\n\n\t\tif (notificationObj.duration && notificationObj.duration > 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.close(notificationRef);\n\t\t\t}, notificationObj.duration);\n\t\t}\n\n\t\tif (notificationObj.smart) {\n\t\t\t// let it disappear after calculated timeout\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.close(notificationRef);\n\t\t\t}, this.getSmartTimeout(notificationObj));\n\t\t}\n\n\t\tthis.onClose.subscribe(() => {\n\t\t\tthis.close(notificationRef);\n\t\t});\n\n\t\tnotificationRef.instance.componentRef = notificationRef;\n\t\treturn notificationRef.instance;\n\t}\n\n\tshowToast(notificationObj: NotificationContent | ToastContent, notificationComp = Toast) {\n\t\treturn this.showNotification(notificationObj, notificationComp as any);\n\t}\n\n\t/**\n\t * Programatically closes notification based on `notificationRef`.\n\t *\n\t * @param notificationRef `ComponentRef` of a notification or `Notification` component you wish to close\n\t */\n\tclose(notificationRef: any) {\n\t\tif (notificationRef) {\n\t\t\tif (notificationRef instanceof Notification) {\n\t\t\t\tthis.close(notificationRef.componentRef);\n\t\t\t} else {\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\tthis.applicationRef.detachView(notificationRef.hostView);\n\t\t\t\t\tnotificationRef.destroy();\n\t\t\t\t\tconst index = this.notificationRefs.indexOf(notificationRef);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tthis.notificationRefs.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}, 200);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the amount of time user needs to read the message in the notification.\n\t *\n\t * @param notificationObj Same object used to instantiate notification.\n\t *\n\t * In addition to `type` and `message` members, use `duration` member to add\n\t * some extra time (in ms) to timeout if you need to.\n\t * @returns calculated timeout (in ms) for smart notification\n\t */\n\tgetSmartTimeout(notificationObj): number {\n\t\t// calculate timeout\n\t\tlet timeout = 600; // start with reaction time\n\n\t\t// custom duration\n\t\ttimeout += notificationObj.duration || 0;\n\n\t\t// message type\n\t\tswitch (notificationObj.type) {\n\t\t\tcase \"info\":\n\t\t\tcase \"success\":\n\t\t\tdefault: {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"danger\": {\n\t\t\t\ttimeout += 3000;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"warning\": {\n\t\t\t\ttimeout += 1500;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// message length\n\t\t// average reader reads around 200 words per minute, or it takes them ~0.3s per word\n\t\t// let's use 1.5 factor for below average speed readers and have 0.45s per word\n\t\tlet wordCount = notificationObj.message.trim().split(/\\s+/).length;\n\t\ttimeout += wordCount * 450;\n\n\t\treturn timeout;\n\t}\n\n\t/**\n\t * OnDestroy hook.\n\t *\n\t * Destroys all living notifications it is responsible for.\n\t *\n\t */\n\tngOnDestroy() {\n\t\tif (this.notificationRefs.length > 0) {\n\t\t\tfor (let i = 0; i < this.notificationRefs.length; i++) {\n\t\t\t\tlet notificationRef = this.notificationRefs[i];\n\t\t\t\tthis.applicationRef.detachView(notificationRef.hostView);\n\t\t\t\tnotificationRef.destroy();\n\t\t\t}\n\t\t\tthis.notificationRefs.length = 0;\n\t\t}\n\t}\n}\n"]}