{"version":3,"file":"placeholder.service.js","sourceRoot":"","sources":["../src/placeholder/placeholder.service.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C;;;GAGG;AACH;IAAA;QAEC;;WAEG;QACO,qBAAgB,GAAqB,IAAI,CAAC;IAkDrD,CAAC;IAjDA;;OAEG;IACH,qDAAwB,GAAxB,UAAyB,KAAuB;QAC/C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,4CAAe,GAAf,UAAgB,gBAAuC,EAAE,QAAkB;QAC1E,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC3B,OAAO,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;SACtF;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAChF,CAAC;IAED,6CAAgB,GAAhB,UAAiB,SAA4B;QAC5C,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,KAAK,GAAG,CAAC,EAAE;YACd,OAAO;SACP;QAED,mBAAmB;QACnB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,4CAAe,GAAf,UAAgB,SAA4B;QAC3C,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC1D,OAAO,KAAK,CAAC;SACb;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,8CAAiB,GAAjB;QACC,OAAO,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAChC,CAAC;IAED,0CAAa,GAAb,UAAc,OAAoB;QACjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACzE,CAAC;IAED,0CAAa,GAAb,UAAc,OAAoB;QACjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACzE,CAAC;IAED,uCAAU,GAAV,UAAW,OAAoB;QAC9B,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACtE,CAAC;;gBAtDD,UAAU;;IAuDX,yBAAC;CAAA,AAvDD,IAuDC;SAtDY,kBAAkB","sourcesContent":["import {\n\tComponentRef,\n\tViewContainerRef,\n\tComponentFactory,\n\tInjector\n} from \"@angular/core\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Singleton service used to register the container for out-of-flow components to insert into.\n * Also used to insert/remove components from that view.\n */\n@Injectable()\nexport class PlaceholderService {\n\t/**\n\t * Maintain a `ViewContainerRef` to an instance of the component.\n\t */\n\tprotected viewContainerRef: ViewContainerRef = null;\n\t/**\n\t * Used by `Placeholder` to register view-container reference.\n\t */\n\tregisterViewContainerRef(vcRef: ViewContainerRef): void {\n\t\tthis.viewContainerRef = vcRef;\n\t}\n\n\t/**\n\t * Creates and returns component in the view.\n\t */\n\tcreateComponent(componentFactory: ComponentFactory<any>, injector: Injector): ComponentRef<any> {\n\t\tif (!this.viewContainerRef) {\n\t\t\tconsole.error(\"No view container defined! Likely due to a missing `ibm-placeholder`\");\n\t\t}\n\t\treturn this.viewContainerRef.createComponent(componentFactory, null, injector);\n\t}\n\n\tdestroyComponent(component: ComponentRef<any>) {\n\t\tconst index = this.viewContainerRef.indexOf(component.hostView);\n\t\tif (index < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// destroy the view\n\t\tthis.viewContainerRef.remove(index);\n\t}\n\n\thasComponentRef(component: ComponentRef<any>) {\n\t\tif (this.viewContainerRef.indexOf(component.hostView) < 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\thasPlaceholderRef() {\n\t\treturn !!this.viewContainerRef;\n\t}\n\n\tappendElement(element: HTMLElement): HTMLElement {\n\t\treturn this.viewContainerRef.element.nativeElement.appendChild(element);\n\t}\n\n\tremoveElement(element: HTMLElement): HTMLElement {\n\t\treturn this.viewContainerRef.element.nativeElement.removeChild(element);\n\t}\n\n\thasElement(element: HTMLElement): boolean {\n\t\treturn this.viewContainerRef.element.nativeElement.contains(element);\n\t}\n}\n"]}