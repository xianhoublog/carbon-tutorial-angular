/**
 *
 * carbon-angular v0.0.0 | modal.component.ngfactory.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./overlay.component.ngfactory";
import * as i2 from "./overlay.component";
import * as i3 from "./modal.component";
import * as i4 from "./modal.service";
var styles_Modal = [];
var RenderType_Modal = i0.ɵcrt({ encapsulation: 2, styles: styles_Modal, data: { "animation": [{ type: 7, name: "modalState", definitions: [{ type: 0, name: "void", styles: { type: 6, styles: { transform: "translate(0, 5%)", opacity: 0 }, offset: null }, options: undefined }, { type: 1, expr: ":enter", animation: [{ type: 4, styles: null, timings: "200ms ease-in" }], options: null }, { type: 1, expr: ":leave", animation: [{ type: 4, styles: { type: 6, styles: { transform: "translate(0, 5%)", opacity: 0 }, offset: null }, timings: 200 }], options: null }], options: {} }] } });
export { RenderType_Modal as RenderType_Modal };
export function View_Modal_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { modal: 0 }), (_l()(), i0.ɵeld(1, 0, null, null, 3, "ibm-overlay", [], null, [[null, "overlaySelect"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("overlaySelect" === en)) {
        var pd_0 = (_co.overlaySelected.emit() !== false);
        ad = (pd_0 && ad);
    } return ad; }, i1.View_Overlay_0, i1.RenderType_Overlay)), i0.ɵdid(2, 49152, null, 0, i2.Overlay, [], { theme: [0, "theme"] }, { overlaySelect: "overlaySelect" }), (_l()(), i0.ɵeld(3, 0, [[1, 0], ["modal", 1]], 0, 1, "div", [["aria-modal", "true"], ["class", "bx--modal-container"], ["role", "dialog"], ["style", "z-index:1;"]], [[24, "@modalState", 0], [1, "aria-label", 0]], null, null, null, null)), i0.ɵncd(null, 0)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.theme; _ck(_v, 2, 0, currVal_0); }, function (_ck, _v) { var _co = _v.component; var currVal_1 = _co.modalState; var currVal_2 = _co.modalLabel; _ck(_v, 3, 0, currVal_1, currVal_2); }); }
export function View_Modal_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "ibm-modal", [], null, [[null, "keydown"]], function (_v, en, $event) { var ad = true; if (("keydown" === en)) {
        var pd_0 = (i0.ɵnov(_v, 1).handleKeyboardEvent($event) !== false);
        ad = (pd_0 && ad);
    } return ad; }, View_Modal_0, RenderType_Modal)), i0.ɵdid(1, 4440064, null, 0, i3.Modal, [i4.ModalService], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }
var ModalNgFactory = i0.ɵccf("ibm-modal", i3.Modal, View_Modal_Host_0, { size: "size", theme: "theme", modalLabel: "modalLabel" }, { overlaySelected: "overlaySelected", close: "close" }, ["*"]);
export { ModalNgFactory as ModalNgFactory };
//# sourceMappingURL=modal.component.ngfactory.js.map