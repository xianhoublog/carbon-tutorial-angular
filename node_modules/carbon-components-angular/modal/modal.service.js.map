{"version":3,"file":"modal.service.js","sourceRoot":"","sources":["../src/modal/modal.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tComponentFactoryResolver,\n\tComponentRef,\n\tInjector\n} from \"@angular/core\";\nimport { Modal } from \"./modal.component\";\nimport { ReplaySubject } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { AlertModal } from \"./alert-modal.component\";\nimport { AlertModalData } from \"./alert-modal.interface\";\nimport { PlaceholderService } from \"./../placeholder/placeholder.module\";\n\n\n/**\n * Modal service handles instantiating and destroying modal instances.\n * Uses ModalPlaceholderService to track open instances, and for it's placeholder view reference.\n *\n * ```typescript\n * export class ModalService {\n * \tregisterViewContainerRef(vcRef: ViewContainerRef): void {}\n * \tcreate<T>(data: {component: any, inputs?: any}): void {}\n * \tdestroy(index: number = -1): void {}\n * }\n * ```\n */\n@Injectable()\nexport class ModalService {\n\t// track all our open modals\n\tprotected static modalList: Array<ComponentRef<any>> = [];\n\n\t/**\n\t * Creates an instance of `ModalService`.\n\t */\n\tconstructor(public resolver: ComponentFactoryResolver, public placeholderService: PlaceholderService) {}\n\n\t/**\n\t * Creates and renders the modal component that is passed in.\n\t * `inputs` is an optional parameter of `data` that can be passed to the `Modal` component.\n\t */\n\tcreate<T>(data: {component: any, inputs?: any}): ComponentRef<any> {\n\t\tlet defaults = {inputs: {}};\n\t\tdata = Object.assign({}, defaults, data);\n\n\t\tconst inputProviders = Object.keys(data.inputs).map(inputName => ({provide: inputName, useValue: data.inputs[inputName]}));\n\t\tconst injector = Injector.create(inputProviders);\n\t\tconst factory = this.resolver.resolveComponentFactory(data.component);\n\t\tlet focusedElement = document.activeElement as HTMLElement;\n\n\t\tlet component = this.placeholderService.createComponent(factory, injector);\n\n\t\tcomponent[\"previouslyFocusedElement\"] = focusedElement;  // used to return focus to previously focused element\n\n\t\tcomponent.instance.close.subscribe(_ => {\n\t\t\tthis.placeholderService.destroyComponent(component);\n\t\t\t// filter out our component\n\t\t\tModalService.modalList = ModalService.modalList.filter(c => c === component);\n\t\t});\n\n\t\tcomponent.onDestroy(() => {\n\t\t\tfocusedElement.focus();\n\t\t});\n\n\t\tModalService.modalList.push(component);\n\n\t\treturn component;\n\t}\n\n\t/**\n\t * Creates and renders a new alert modal component.\n\t * @param data You can pass in:\n\t * `modalType` - \"default\" | \"danger\" = \"default\",\n\t * `modalLabel` - a label shown over the title,\n\t * `modalTitle` - modal's title,\n\t * `modalContent` - modal's content, could include HTML tags.\n\t * `buttons` is an array of objects\n\t * ```\n\t * {\n\t * \t\ttext: \"Button text\",\n\t * \t\ttype: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\" | \"danger--primary\" = \"primary\",\n\t * \t\tclick: clickFunction,\n\t * }\n\t * ```\n\t */\n\tshow(data: AlertModalData) {\n\t\tfor (let key of Object.keys(data)) {\n\t\t\tif ([\"modalType\", \"modalLabel\", \"modalTitle\", \"modalContent\"].includes(key)) {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error(`${key} is deprecated, use ${key.replace(\"modal\", \"\").toLowerCase()} instead`);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.create({\n\t\t\tcomponent: AlertModal,\n\t\t\tinputs: {\n\t\t\t\tmodalType: data.type || data.modalType,\n\t\t\t\tmodalLabel: data.label || data.modalLabel,\n\t\t\t\tmodalTitle: data.title || data.modalTitle,\n\t\t\t\tmodalContent: data.content || data.modalContent,\n\t\t\t\tbuttons: data.buttons || [],\n\t\t\t\tclose: data.close || (() => {})\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Destroys the modal on the supplied index.\n\t * When called without parameters it destroys the most recently created/top most modal.\n\t */\n\tdestroy(index = -1) {\n\t\t// return if nothing to destroy because it's already destroyed\n\t\tif (index >= ModalService.modalList.length || ModalService.modalList.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t// on negative index destroy the last on the list (top modal)\n\t\tif (index < 0) {\n\t\t\tindex = ModalService.modalList.length - 1;\n\t\t}\n\n\t\tthis.placeholderService.destroyComponent(ModalService.modalList[index]);\n\t\tModalService.modalList.splice(index, 1);\n\t}\n}\n\n\n"]}