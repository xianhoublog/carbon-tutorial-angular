{"version":3,"file":"list-item.interface.js","sourceRoot":"","sources":["../src/dropdown/list-item.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * A generic structure that represents an item in a list.\n * A list item may contain additional lists with sub-items to represent a tree.\n *\n * ```typescript\n * export interface ListItem {\n * \tcontent: string;\n * \tselected: boolean;\n * \tdisabled?: boolean;\n * \titems?: ListItem[];\n * }\n * ```\n *\n * `content` and `selected` are the only **required** properties you **must** provide.\n * When using a custom item template (supported by all the Carbon-Angular item views, not required by AbstractDropdownView)\n * the entire ListItem will be passed to the template as `item`.\n */\nexport interface ListItem {\n\t/**\n\t * Content to be displayed in the list.\n\t */\n\tcontent: string;\n\t/**\n\t * Flag for the selected state of the item.\n\t */\n\tselected: boolean;\n\t/**\n\t * If the item is in a disabled state.\n\t * (Note: not all lists have to support disabled states, and not all lists behave the same with disabled items)\n\t */\n\tdisabled?: boolean;\n\t/**\n\t * Optional nested items.\n\t */\n\titems?: ListItem[];\n\n\t/**\n\t * Allows for any other custom properties to be included in the ListItem\n\t */\n\t[x: string]: any;\n}\n"]}