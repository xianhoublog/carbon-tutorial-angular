{"version":3,"file":"abstract-dropdown-view.class.js","sourceRoot":"","sources":["../src/dropdown/abstract-dropdown-view.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAK5D;;;;GAIG;AACH;IAAA;QAwBC;;;WAGG;QACI,SAAI,GAAuB,QAAQ,CAAC;QAC3C;;WAEG;QACI,SAAI,GAAuB,IAAI,CAAC;IAuDxC,CAAC;IAnFA,sBAAa,uCAAK;aAElB,cAA6D,OAAO,CAAC,CAAC;QALtE;;WAEG;aACH,UAAmB,KAAoD,IAAI,CAAC;;;OAAA;IA6B5E;;OAEG;IACH,0CAAW,GAAX,cAA0B,OAAO,CAAC,CAAC;IACnC;;OAEG;IACH,6CAAc,GAAd,cAA4B,OAAO,CAAC,CAAC;IACrC;;OAEG;IACH,6CAAc,GAAd,cAAgC,OAAO,CAAC,CAAC;IACzC;;OAEG;IACH,0CAAW,GAAX,cAA0B,OAAO,CAAC,CAAC;IACnC;;OAEG;IACH,6CAAc,GAAd,cAA4B,OAAO,CAAC,CAAC;IACrC;;OAEG;IACH,6CAAc,GAAd,cAAgC,OAAO,CAAC,CAAC;IACzC;;OAEG;IACH,0CAAW,GAAX,cAA4B,OAAO,CAAC,CAAC;IACrC;;OAEG;IACH,6CAAc,GAAd,cAA6B,OAAO,CAAC,CAAC;IACtC;;OAEG;IACH,gDAAiB,GAAjB,cAAmC,OAAO,CAAC,CAAC;IAC5C;;OAEG;IACH,2CAAY,GAAZ,cAAkC,OAAO,CAAC,CAAC;IAC3C;;OAEG;IACH,gDAAiB,GAAjB,UAAkB,KAAsB,IAAS,CAAC;IAClD;;;OAGG;IACH,uCAAQ,GAAR,UAAS,KAAa,IAAS,CAAC;IAChC;;;OAGG;IACH,wCAAS,GAAT,cAAmB,CAAC;;wBAlFnB,KAAK;yBAQL,MAAM;6BAWN,MAAM;;IAgER,2BAAC;CAAA,AAvFD,IAuFC;SAvFY,oBAAoB","sourcesContent":["import { Input, Output, EventEmitter } from \"@angular/core\";\nimport { ListItem } from \"./list-item.interface\";\nimport { Observable } from \"rxjs\";\n\n\n/**\n * A component that intends to be used within `Dropdown` must provide an implementation that extends this base class.\n * It also must provide the base class in the `@Component` meta-data.\n * ex: `providers: [{provide: AbstractDropdownView, useExisting: forwardRef(() => MyDropdownView)}]`\n */\nexport class AbstractDropdownView {\n\t/**\n\t * The items to be displayed in the list within the `AbstractDropDownView`.\n\t */\n\t@Input() set items(value: Array<ListItem> | Observable<Array<ListItem>>) { }\n\n\tget items(): Array<ListItem> | Observable<Array<ListItem>> { return; }\n\t/**\n\t * Emits selection events to controlling classes\n\t *\n\t * Deprecated: `Object` as a valid type.\n\t */\n\t@Output() select: EventEmitter<{item: ListItem } | ListItem[] | Object>;\n\t/**\n\t * Event to suggest a blur on the view.\n\t * Emits _after_ the first/last item has been focused.\n\t * ex.\n\t * ArrowUp -> focus first item\n\t * ArrowUp -> emit event\n\t *\n\t * It's recommended that the implementing view include a specific type union of possible blurs\n\t * ex. `@Output() blurIntent = new EventEmitter<\"top\" | \"bottom\">();`\n\t */\n\t@Output() blurIntent: EventEmitter<any>;\n\t/**\n\t * Specifies whether or not the `DropdownList` supports selecting multiple items as opposed to single\n\t * item selection.\n\t */\n\tpublic type: \"single\" | \"multi\" = \"single\";\n\t/**\n\t * Specifies the render size of the items within the `AbstractDropdownView`.\n\t */\n\tpublic size: \"sm\" | \"md\" | \"lg\" = \"md\";\n\t/**\n\t * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.\n\t */\n\tgetNextItem(): ListItem { return; }\n\t/**\n\t * Returns a boolean if the currently selected item is preceded by another\n\t */\n\thasNextElement(): boolean { return; }\n\t/**\n\t * Returns the `HTMLElement` for the item that is subsequent to the selected item.\n\t */\n\tgetNextElement(): HTMLElement { return; }\n\t/**\n\t * Returns the `ListItem` that precedes the selected item within `DropdownList`.\n\t */\n\tgetPrevItem(): ListItem { return; }\n\t/**\n\t * Returns a boolean if the currently selected item is followed by another\n\t */\n\thasPrevElement(): boolean { return; }\n\t/**\n\t * Returns the `HTMLElement` for the item that precedes the selected item.\n\t */\n\tgetPrevElement(): HTMLElement { return; }\n\t/**\n\t * Returns the selected leaf level item(s) within the `DropdownList`.\n\t */\n\tgetSelected(): ListItem[] { return; }\n\t/**\n\t * Returns the `ListItem` that is selected within `DropdownList`.\n\t */\n\tgetCurrentItem(): ListItem { return; }\n\t/**\n\t * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.\n\t */\n\tgetCurrentElement(): HTMLElement { return; }\n\t/**\n\t * Guaranteed to return the current items as an Array.\n\t */\n\tgetListItems(): Array<ListItem> { return; }\n\t/**\n\t * Transforms array input list of items to the correct state by updating the selected item(s).\n\t */\n\tpropagateSelected(value: Array<ListItem>): void {}\n\t/**\n\t *\n\t * @param value value to filter the list by\n\t */\n\tfilterBy(value: string): void {}\n\t/**\n\t * Initializes focus in the list\n\t * In most cases this just calls `getCurrentElement().focus()`\n\t */\n\tinitFocus(): void {}\n}\n"]}