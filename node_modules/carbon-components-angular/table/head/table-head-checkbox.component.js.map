{"version":3,"file":"table-head-checkbox.component.js","sourceRoot":"","sources":["../../src/table/head/table-head-checkbox.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,SAAS,EACT,KAAK,EACL,MAAM,EACN,WAAW,EACX,YAAY,EACZ,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,IAAI,EAAe,MAAM,0BAA0B,CAAC;AAG7D;IA6CC,2BAAsB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QA1BhC;;WAEG;QACM,SAAI,GAA8B,IAAI,CAAC;QAEvC,YAAO,GAAG,KAAK,CAAC;QAEhB,kBAAa,GAAG,KAAK,CAAC;QAEtB,aAAQ,GAAG,KAAK,CAAC;QAWhB,WAAM,GAAG,IAAI,YAAY,EAAW,CAAC;QAEC,cAAS,GAAG,IAAI,CAAC;QAEvD,eAAU,GAAgB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;IAElD,CAAC;IAfrC,sBACI,wCAAS;aAIb;YACC,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QAC9B,CAAC;aAPD,UACc,KAAkC;YAC/C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;;;OAAA;IAcD,wCAAY,GAAZ;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IAChC,CAAC;;gBAjDD,SAAS,SAAC;oBACV,+CAA+C;oBAC/C,QAAQ,EAAE,wBAAwB;oBAClC,QAAQ,EAAE,wSAUT;oBACD,MAAM,EAAE,CAAC,wCAEL,CAAC;iBACL;;;;gBApBQ,IAAI;;;uBAyBX,KAAK;0BAEL,KAAK;gCAEL,KAAK;2BAEL,KAAK;4BAEL,KAAK;yBASL,MAAM;4BAEN,WAAW,SAAC,iCAAiC;;IAS/C,wBAAC;CAAA,AAlDD,IAkDC;SAhCY,iBAAiB","sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tHostBinding,\n\tEventEmitter\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"./../../i18n/i18n.module\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableHeadCheckbox]\",\n\ttemplate: `\n\t\t<ibm-checkbox\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tinline=\"true\"\n\t\t\t[size]=\"(size !== 'sm' ? 'md' : 'sm')\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[indeterminate]=\"indeterminate\"\n\t\t\t(change)=\"change.emit()\"\n\t\t\t[aria-label]=\"getAriaLabel() | async\">\n\t\t</ibm-checkbox>\n\t`,\n\tstyles: [`\n        :host { width: 10px; }\n    `]\n})\nexport class TableHeadCheckbox {\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: \"sm\" | \"sh\" | \"md\" | \"lg\" = \"md\";\n\n\t@Input() checked = false;\n\n\t@Input() indeterminate = false;\n\n\t@Input() skeleton = false;\n\n\t@Input()\n\tset ariaLabel(value: string | Observable<string>) {\n\t\tthis._ariaLabel.override(value);\n\t}\n\n\tget ariaLabel() {\n\t\treturn this._ariaLabel.value;\n\t}\n\n\t@Output() change = new EventEmitter<boolean>();\n\n\t@HostBinding(\"class.bx--table-column-checkbox\") hostClass = true;\n\n\tprotected _ariaLabel: Overridable = this.i18n.getOverridable(\"TABLE.CHECKBOX_HEADER\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\tgetAriaLabel(): Observable<string> {\n\t\treturn this._ariaLabel.subject;\n\t}\n}\n"]}