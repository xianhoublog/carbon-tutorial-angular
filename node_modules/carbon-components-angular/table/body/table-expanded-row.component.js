/**
 *
 * carbon-angular v0.0.0 | table-expanded-row.component.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input } from "@angular/core";
var TableExpandedRow = /** @class */ (function () {
    function TableExpandedRow() {
        this.skeleton = false;
        this.expandableRowClass = true;
        this.expanded = false;
    }
    TableExpandedRow.prototype.firstExpandedTemplateInRow = function (row) {
        var found = row.find(function (d) { return d.expandedTemplate; });
        if (found) {
            return found.expandedTemplate;
        }
        return found;
    };
    TableExpandedRow.prototype.firstExpandedDataInRow = function (row) {
        var found = row.find(function (d) { return d.expandedData; });
        if (found) {
            return found.expandedData;
        }
        return found;
    };
    TableExpandedRow.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[ibmTableExpandedRow]",
                    template: "\n\t\t<td [attr.colspan]=\"row.length + 2\">\n\t\t\t<ng-container *ngIf=\"!firstExpandedTemplateInRow(row)\">\n\t\t\t\t{{firstExpandedDataInRow(row)}}\n\t\t\t</ng-container>\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"firstExpandedTemplateInRow(row)\"\n\t\t\t\t[ngTemplateOutletContext]=\"{data: firstExpandedDataInRow(row)}\">\n\t\t\t</ng-template>\n\t\t</td>\n\t"
                },] },
    ];
    TableExpandedRow.propDecorators = {
        row: [{ type: Input }],
        skeleton: [{ type: Input }],
        expandableRowClass: [{ type: HostBinding, args: ["class.bx--expandable-row",] }],
        expanded: [{ type: HostBinding, args: ["attr.data-child-row",] }, { type: Input }]
    };
    return TableExpandedRow;
}());
export { TableExpandedRow };
//# sourceMappingURL=table-expanded-row.component.js.map