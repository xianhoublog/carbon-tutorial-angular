/**
 *
 * carbon-angular v0.0.0 | table-expanded-row.component.ngfactory.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./table-expanded-row.component";
var styles_TableExpandedRow = [];
var RenderType_TableExpandedRow = i0.ɵcrt({ encapsulation: 2, styles: styles_TableExpandedRow, data: {} });
export { RenderType_TableExpandedRow as RenderType_TableExpandedRow };
function View_TableExpandedRow_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, null, null, null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [" ", " "]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.firstExpandedDataInRow(_co.row); _ck(_v, 1, 0, currVal_0); }); }
function View_TableExpandedRow_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }
export function View_TableExpandedRow_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 5, "td", [], [[1, "colspan", 0]], null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TableExpandedRow_1)), i0.ɵdid(2, 16384, null, 0, i1.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, "ngIf"] }, null), (_l()(), i0.ɵand(16777216, null, null, 2, null, View_TableExpandedRow_2)), i0.ɵdid(4, 540672, null, 0, i1.NgTemplateOutlet, [i0.ViewContainerRef], { ngTemplateOutletContext: [0, "ngTemplateOutletContext"], ngTemplateOutlet: [1, "ngTemplateOutlet"] }, null), i0.ɵpod(5, { data: 0 })], function (_ck, _v) { var _co = _v.component; var currVal_1 = !_co.firstExpandedTemplateInRow(_co.row); _ck(_v, 2, 0, currVal_1); var currVal_2 = _ck(_v, 5, 0, _co.firstExpandedDataInRow(_co.row)); var currVal_3 = _co.firstExpandedTemplateInRow(_co.row); _ck(_v, 4, 0, currVal_2, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.row.length + 2); _ck(_v, 0, 0, currVal_0); }); }
export function View_TableExpandedRow_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "div", [["ibmTableExpandedRow", ""]], [[2, "bx--expandable-row", null], [1, "data-child-row", 0]], null, null, View_TableExpandedRow_0, RenderType_TableExpandedRow)), i0.ɵdid(1, 49152, null, 0, i2.TableExpandedRow, [], null, null)], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).expandableRowClass; var currVal_1 = i0.ɵnov(_v, 1).expanded; _ck(_v, 0, 0, currVal_0, currVal_1); }); }
var TableExpandedRowNgFactory = i0.ɵccf("[ibmTableExpandedRow]", i2.TableExpandedRow, View_TableExpandedRow_Host_0, { row: "row", skeleton: "skeleton", expanded: "expanded" }, {}, []);
export { TableExpandedRowNgFactory as TableExpandedRowNgFactory };
//# sourceMappingURL=table-expanded-row.component.ngfactory.js.map