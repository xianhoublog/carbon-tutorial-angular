/**
 *
 * carbon-angular v0.0.0 | table-row.component.d.ts
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import { TableModel } from "./../table-model.class";
import { I18n, Overridable } from "./../../i18n/i18n.module";
import { TableItem } from "./../table-item.class";
import { Observable } from "rxjs";
export declare class TableRowComponent {
    protected i18n: I18n;
    /**
     * `TableModel` with data the table is to display.
     */
    model: TableModel;
    row: TableItem[];
    expanded: boolean;
    expandable: boolean;
    selected: boolean;
    /**
     * Size of the table rows.
     */
    size: "sm" | "md" | "lg";
    /**
     * Controls whether to enable multiple or single row selection.
     */
    enableSingleSelect: boolean;
    expandButtonAriaLabel: string | Observable<string>;
    checkboxLabel: string | Observable<string>;
    /**
     * Controls whether to show the selection checkboxes column or not.
     */
    showSelectionColumn: boolean;
    /**
     * Used to populate the row selection checkbox label with a useful value if set.
     *
     * Example:
     * ```
     * <ibm-table [selectionLabelColumn]="0"></ibm-table>
     * <!-- results in aria-label="Select first column value"
     * (where "first column value" is the value of the first column in the row -->
     * ```
     */
    selectionLabelColumn: number;
    skeleton: boolean;
    /**
     * Emits when the row is selected.
     */
    selectRow: EventEmitter<{}>;
    /**
     * Emits when the row is deselected.
     */
    deselectRow: EventEmitter<{}>;
    /**
     * Emits when the row is expanded
     */
    expandRow: EventEmitter<{}>;
    readonly selectedClass: boolean;
    readonly parentRowClass: boolean;
    readonly expandableRowClass: boolean;
    readonly selectableClass: boolean;
    readonly isParentRow: boolean;
    protected _checkboxLabel: Overridable;
    protected _expandButtonAriaLabel: Overridable;
    constructor(i18n: I18n);
    onRowClick(): void;
    onSelectionChange(): void;
    getCheckboxLabel(): Observable<string>;
    getExpandButtonAriaLabel(): Observable<string>;
}
