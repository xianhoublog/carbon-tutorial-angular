/**
 *
 * carbon-angular v0.0.0 | table-body.component.ngfactory.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./table-row.component.ngfactory";
import * as i2 from "@angular/common";
import * as i3 from "./table-row.component";
import * as i4 from "../../i18n/i18n.service";
import * as i5 from "./table-expanded-row.component.ngfactory";
import * as i6 from "../expanded-row-hover.directive";
import * as i7 from "./table-expanded-row.component";
import * as i8 from "./table-body.component";
var styles_TableBody = [];
var RenderType_TableBody = i0.ɵcrt({ encapsulation: 2, styles: styles_TableBody, data: {} });
export { RenderType_TableBody as RenderType_TableBody };
function View_TableBody_3(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, "tr", [["ibmTableRow", ""]], [[2, "bx--data-table--selected", null], [2, "bx--parent-row", null], [2, "bx--expandable-row", null], [2, "tbody_row--selectable", null], [1, "data-parent-row", 0]], [[null, "selectRow"], [null, "deselectRow"], [null, "expandRow"], [null, "click"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("click" === en)) {
        var pd_0 = (i0.ɵnov(_v, 3).onRowClick() !== false);
        ad = (pd_0 && ad);
    } if (("selectRow" === en)) {
        var pd_1 = (_co.onRowCheckboxChange(_v.parent.context.index) !== false);
        ad = (pd_1 && ad);
    } if (("deselectRow" === en)) {
        var pd_2 = (_co.onRowCheckboxChange(_v.parent.context.index) !== false);
        ad = (pd_2 && ad);
    } if (("expandRow" === en)) {
        var pd_3 = (_co.model.expandRow(_v.parent.context.index, !_co.model.isRowExpanded(_v.parent.context.index)) !== false);
        ad = (pd_3 && ad);
    } return ad; }, i1.View_TableRowComponent_0, i1.RenderType_TableRowComponent)), i0.ɵdid(1, 278528, null, 0, i2.NgClass, [i0.IterableDiffers, i0.KeyValueDiffers, i0.ElementRef, i0.Renderer2], { klass: [0, "klass"], ngClass: [1, "ngClass"] }, null), i0.ɵpod(2, { "tbody_row--success": 0, "tbody_row--warning": 1, "tbody_row--info": 2, "tbody_row--error": 3 }), i0.ɵdid(3, 49152, null, 0, i3.TableRowComponent, [i4.I18n], { model: [0, "model"], row: [1, "row"], expanded: [2, "expanded"], expandable: [3, "expandable"], selected: [4, "selected"], size: [5, "size"], enableSingleSelect: [6, "enableSingleSelect"], expandButtonAriaLabel: [7, "expandButtonAriaLabel"], checkboxLabel: [8, "checkboxLabel"], showSelectionColumn: [9, "showSelectionColumn"], skeleton: [10, "skeleton"] }, { selectRow: "selectRow", deselectRow: "deselectRow", expandRow: "expandRow" })], function (_ck, _v) { var _co = _v.component; var currVal_5 = (_co.model.rowsClass[_v.parent.context.index] ? _co.model.rowsClass[_v.parent.context.index] : null); var currVal_6 = _ck(_v, 2, 0, (!_co.model.isRowSelected(_v.parent.context.index) && (_co.model.getRowContext(_v.parent.context.index) === "success")), (!_co.model.isRowSelected(_v.parent.context.index) && (_co.model.getRowContext(_v.parent.context.index) === "warning")), (!_co.model.isRowSelected(_v.parent.context.index) && (_co.model.getRowContext(_v.parent.context.index) === "info")), (!_co.model.isRowSelected(_v.parent.context.index) && (_co.model.getRowContext(_v.parent.context.index) === "error"))); _ck(_v, 1, 0, currVal_5, currVal_6); var currVal_7 = _co.model; var currVal_8 = _v.parent.context.$implicit; var currVal_9 = _co.model.isRowExpanded(_v.parent.context.index); var currVal_10 = _co.model.isRowExpandable(_v.parent.context.index); var currVal_11 = _co.model.isRowSelected(_v.parent.context.index); var currVal_12 = _co.size; var currVal_13 = _co.enableSingleSelect; var currVal_14 = _co.getExpandButtonAriaLabel(); var currVal_15 = _co.getCheckboxRowLabel(); var currVal_16 = _co.showSelectionColumn; var currVal_17 = _co.skeleton; _ck(_v, 3, 1, [currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17]); }, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 3).selectedClass; var currVal_1 = i0.ɵnov(_v, 3).parentRowClass; var currVal_2 = i0.ɵnov(_v, 3).expandableRowClass; var currVal_3 = i0.ɵnov(_v, 3).selectableClass; var currVal_4 = i0.ɵnov(_v, 3).isParentRow; _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4); }); }
function View_TableBody_4(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, "tr", [["ibmExpandedRowHover", ""], ["ibmTableExpandedRow", ""]], [[2, "bx--expandable-row", null], [1, "data-child-row", 0]], [[null, "mouseenter"], [null, "mouseleave"]], function (_v, en, $event) { var ad = true; if (("mouseenter" === en)) {
        var pd_0 = (i0.ɵnov(_v, 1).addHoverClass($event) !== false);
        ad = (pd_0 && ad);
    } if (("mouseleave" === en)) {
        var pd_1 = (i0.ɵnov(_v, 1).removeHoverClass($event) !== false);
        ad = (pd_1 && ad);
    } return ad; }, i5.View_TableExpandedRow_0, i5.RenderType_TableExpandedRow)), i0.ɵdid(1, 16384, null, 0, i6.ExpandedRowHover, [], null, null), i0.ɵdid(2, 49152, null, 0, i7.TableExpandedRow, [], { row: [0, "row"], skeleton: [1, "skeleton"], expanded: [2, "expanded"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_2 = _v.parent.context.$implicit; var currVal_3 = _co.skeleton; var currVal_4 = _co.model.isRowExpanded(_v.parent.context.index); _ck(_v, 2, 0, currVal_2, currVal_3, currVal_4); }, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 2).expandableRowClass; var currVal_1 = i0.ɵnov(_v, 2).expanded; _ck(_v, 0, 0, currVal_0, currVal_1); }); }
function View_TableBody_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 4, null, null, null, null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TableBody_3)), i0.ɵdid(2, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, "ngIf"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TableBody_4)), i0.ɵdid(4, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, "ngIf"] }, null), (_l()(), i0.ɵand(0, null, null, 0))], function (_ck, _v) { var _co = _v.component; var currVal_0 = !_co.model.isRowFiltered(_v.context.index); _ck(_v, 2, 0, currVal_0); var currVal_1 = (_co.model.isRowExpanded(_v.context.index) && !_co.model.isRowFiltered(_v.context.index)); _ck(_v, 4, 0, currVal_1); }, null); }
function View_TableBody_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, null, null, null, null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TableBody_2)), i0.ɵdid(2, 278528, null, 0, i2.NgForOf, [i0.ViewContainerRef, i0.TemplateRef, i0.IterableDiffers], { ngForOf: [0, "ngForOf"] }, null), (_l()(), i0.ɵand(0, null, null, 0))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.model.data; _ck(_v, 2, 0, currVal_0); }, null); }
export function View_TableBody_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(16777216, null, null, 1, null, View_TableBody_1)), i0.ɵdid(1, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, "ngIf"] }, null), i0.ɵncd(null, 0)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.model; _ck(_v, 1, 0, currVal_0); }, null); }
export function View_TableBody_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "div", [["ibmTableBody", ""]], null, null, null, View_TableBody_0, RenderType_TableBody)), i0.ɵdid(1, 49152, null, 0, i8.TableBody, [i4.I18n], null, null)], null, null); }
var TableBodyNgFactory = i0.ɵccf("[ibmTableBody]", i8.TableBody, View_TableBody_Host_0, { model: "model", enableSingleSelect: "enableSingleSelect", expandButtonAriaLabel: "expandButtonAriaLabel", checkboxRowLabel: "checkboxRowLabel", showSelectionColumn: "showSelectionColumn", size: "size", selectionLabelColumn: "selectionLabelColumn", skeleton: "skeleton" }, { selectRow: "selectRow", deselectRow: "deselectRow" }, ["*"]);
export { TableBodyNgFactory as TableBodyNgFactory };
//# sourceMappingURL=table-body.component.ngfactory.js.map