{"version":3,"file":"table-checkbox.component.js","sourceRoot":"","sources":["../../src/table/cell/table-checkbox.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,IAAI,EAAe,MAAM,0BAA0B,CAAC;AAI7D;IAsDC,uBAAsB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QArCvB,aAAQ,GAAG,KAAK,CAAC;QAE1B;;WAEG;QACM,SAAI,GAAuB,IAAI,CAAC;QAuBhC,aAAQ,GAAG,KAAK,CAAC;QAE1B;;WAEG;QACO,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;QAE5B,WAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;IAE9B,CAAC;IA9BrC,sBACI,gCAAK;aAIT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAC1B,CAAC;aAPD,UACU,KAAkC;YAC3C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;;;OAAA;IA6BD,8CAAsB,GAAtB,UAAuB,GAAgB;QACtC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC/B,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAC5C;QACD,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,EAAE,CAAC;IACvD,CAAC;IAED,gCAAQ,GAAR;QACC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC5B,CAAC;;gBAjED,SAAS,SAAC;oBACV,+CAA+C;oBAC/C,QAAQ,EAAE,oBAAoB;oBAC9B,QAAQ,EAAE,sSAST;iBACD;;;;gBAjBQ,IAAI;;;sBAmBX,KAAK;2BAEL,KAAK;uBAKL,KAAK;wBAEL,KAAK;uCAmBL,KAAK;2BAEL,KAAK;yBAKL,MAAM;;IAgBR,oBAAC;CAAA,AAlED,IAkEC;SApDY,aAAa","sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"./../../i18n/i18n.module\";\nimport { TableItem } from \"./../table-item.class\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableCheckbox]\",\n\ttemplate: `\n\t\t<ibm-checkbox\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tinline=\"true\"\n\t\t\t[aria-label]=\"getLabel() | i18nReplace:getSelectionLabelValue(row) | async\"\n\t\t\t[size]=\"(size !== 'sm' ? 'md' : 'sm')\"\n\t\t\t[checked]=\"selected\"\n\t\t\t(change)=\"change.emit()\">\n\t\t</ibm-checkbox>\n\t`\n})\nexport class TableCheckbox {\n\t@Input() row: any[];\n\n\t@Input() selected = false;\n\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: \"sm\" | \"md\" | \"lg\" = \"md\";\n\n\t@Input()\n\tset label(value: string | Observable<string>) {\n\t\tthis._label.override(value);\n\t}\n\n\tget label() {\n\t\treturn this._label.value;\n\t}\n\n\t/**\n\t * Used to populate the row selection checkbox label with a useful value if set.\n\t *\n\t * Example:\n\t * ```\n\t * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n\t * <!-- results in aria-label=\"Select first column value\"\n\t * (where \"first column value\" is the value of the first column in the row -->\n\t * ```\n\t */\n\t@Input() selectionLabelColumn: number;\n\n\t@Input() skeleton = false;\n\n\t/**\n\t * Emits if a single row is selected.\n\t */\n\t@Output() change = new EventEmitter();\n\n\tprotected _label = this.i18n.getOverridable(\"TABLE.CHECKBOX_ROW\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\tgetSelectionLabelValue(row: TableItem[]) {\n\t\tif (!this.selectionLabelColumn) {\n\t\t\treturn { value: this.i18n.get().TABLE.ROW };\n\t\t}\n\t\treturn { value: row[this.selectionLabelColumn].data };\n\t}\n\n\tgetLabel(): Observable<string> {\n\t\treturn this._label.subject;\n\t}\n}\n"]}