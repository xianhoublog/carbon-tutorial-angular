/**
 *
 * carbon-angular v0.0.0 | table-expand-button.component.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding } from "@angular/core";
import { I18n } from "./../../i18n/i18n.module";
var TableExpandButton = /** @class */ (function () {
    function TableExpandButton(i18n) {
        this.i18n = i18n;
        /**
         * Set to true to indicate the row has expanded
         */
        this.expanded = false;
        /**
         * Set to true to indicate the row can be expanded.
         * Defaults to false to allow for correct column alignment
         */
        this.expandable = false;
        this.skeleton = false;
        this.expandClass = true;
        this.expandRow = new EventEmitter();
        this._ariaLabel = this.i18n.getOverridable("TABLE.EXPAND_BUTTON");
    }
    Object.defineProperty(TableExpandButton.prototype, "ariaLabel", {
        get: function () {
            return this._ariaLabel.value;
        },
        set: function (value) {
            this._ariaLabel.override(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableExpandButton.prototype, "previousValue", {
        get: function () {
            return this.expanded ? "collapsed" : null;
        },
        enumerable: true,
        configurable: true
    });
    TableExpandButton.prototype.getAriaLabel = function () {
        return this._ariaLabel.subject;
    };
    TableExpandButton.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[ibmTableExpandButton]",
                    template: "\n\t\t<button\n\t\t\t*ngIf=\"expandable\"\n\t\t\tclass=\"bx--table-expand__button\"\n\t\t\t[attr.aria-label]=\"getAriaLabel() | async\"\n\t\t\t(click)=\"expandRow.emit()\">\n\t\t\t<ibm-icon-chevron-right16 innerClass=\"bx--table-expand__svg\"></ibm-icon-chevron-right16>\n\t\t</button>\n\t"
                },] },
    ];
    /** @nocollapse */
    TableExpandButton.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    TableExpandButton.propDecorators = {
        expanded: [{ type: Input }],
        expandable: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        skeleton: [{ type: Input }],
        expandClass: [{ type: HostBinding, args: ["class.bx--table-expand",] }],
        previousValue: [{ type: HostBinding, args: ["attr.data-previous-value",] }],
        expandRow: [{ type: Output }]
    };
    return TableExpandButton;
}());
export { TableExpandButton };
//# sourceMappingURL=table-expand-button.component.js.map