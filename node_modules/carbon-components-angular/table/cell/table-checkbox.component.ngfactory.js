/**
 *
 * carbon-angular v0.0.0 | table-checkbox.component.ngfactory.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "../../checkbox/checkbox.component.ngfactory";
import * as i2 from "@angular/forms";
import * as i3 from "../../checkbox/checkbox.component";
import * as i4 from "@angular/common";
import * as i5 from "../../i18n/replace.pipe";
import * as i6 from "./table-checkbox.component";
import * as i7 from "../../i18n/i18n.service";
var styles_TableCheckbox = [];
var RenderType_TableCheckbox = i0.ɵcrt({ encapsulation: 2, styles: styles_TableCheckbox, data: {} });
export { RenderType_TableCheckbox as RenderType_TableCheckbox };
function View_TableCheckbox_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 4, "ibm-checkbox", [["inline", "true"]], [[2, "bx--checkbox-wrapper", null], [2, "bx--form-item", null]], [[null, "change"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("change" === en)) {
        var pd_0 = (_co.change.emit() !== false);
        ad = (pd_0 && ad);
    } return ad; }, i1.View_Checkbox_0, i1.RenderType_Checkbox)), i0.ɵprd(5120, null, i2.NG_VALUE_ACCESSOR, function (p0_0) { return [p0_0]; }, [i3.Checkbox]), i0.ɵdid(2, 4243456, null, 0, i3.Checkbox, [i0.ChangeDetectorRef], { size: [0, "size"], inline: [1, "inline"], ariaLabel: [2, "ariaLabel"], checked: [3, "checked"] }, { change: "change" }), i0.ɵppd(3, 2), i0.ɵpid(131072, i4.AsyncPipe, [i0.ChangeDetectorRef])], function (_ck, _v) { var _co = _v.component; var currVal_2 = ((_co.size !== "sm") ? "md" : "sm"); var currVal_3 = "true"; var currVal_4 = i0.ɵunv(_v, 2, 2, i0.ɵnov(_v, 4).transform(i0.ɵunv(_v, 2, 2, _ck(_v, 3, 0, i0.ɵnov(_v.parent, 0), _co.getLabel(), _co.getSelectionLabelValue(_co.row))))); var currVal_5 = _co.selected; _ck(_v, 2, 0, currVal_2, currVal_3, currVal_4, currVal_5); }, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 2).checkboxWrapperClass; var currVal_1 = i0.ɵnov(_v, 2).formItemClass; _ck(_v, 0, 0, currVal_0, currVal_1); }); }
export function View_TableCheckbox_0(_l) { return i0.ɵvid(0, [i0.ɵpid(0, i5.ReplacePipe, []), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TableCheckbox_1)), i0.ɵdid(2, 16384, null, 0, i4.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, "ngIf"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = !_co.skeleton; _ck(_v, 2, 0, currVal_0); }, null); }
export function View_TableCheckbox_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "div", [["ibmTableCheckbox", ""]], null, null, null, View_TableCheckbox_0, RenderType_TableCheckbox)), i0.ɵdid(1, 49152, null, 0, i6.TableCheckbox, [i7.I18n], null, null)], null, null); }
var TableCheckboxNgFactory = i0.ɵccf("[ibmTableCheckbox]", i6.TableCheckbox, View_TableCheckbox_Host_0, { row: "row", selected: "selected", size: "size", label: "label", selectionLabelColumn: "selectionLabelColumn", skeleton: "skeleton" }, { change: "change" }, []);
export { TableCheckboxNgFactory as TableCheckboxNgFactory };
//# sourceMappingURL=table-checkbox.component.ngfactory.js.map