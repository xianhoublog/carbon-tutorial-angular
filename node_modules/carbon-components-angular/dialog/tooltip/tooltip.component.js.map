{"version":3,"file":"tooltip.component.js","sourceRoot":"","sources":["../../src/dialog/tooltip/tooltip.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EACN,SAAS,EACT,WAAW,EACX,WAAW,EACX,UAAU,EACV,QAAQ,EACR,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;AAEjE,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAE5D;;GAEG;AACH;IAsB6B,2BAAM;IAYlC,iBACW,UAAsB;IAChC,yFAAyF;IACnE,cAAqC;QAArC,+BAAA,EAAA,qBAAqC;QAH5D,YAIC,kBAAM,UAAU,EAAE,cAAc,CAAC,SACjC;QAJU,gBAAU,GAAV,UAAU,CAAY;QAEV,oBAAc,GAAd,cAAc,CAAuB;QAd9B,WAAK,GAAG,cAAc,CAAC;QACrD;;WAEG;QACI,wBAAkB,GAAG,KAAK,CAAC;QAClC;;;WAGG;QACI,UAAI,GAAG,SAAS,CAAC;;IAOxB,CAAC;IAED;;OAEG;IACH,8BAAY,GAAZ;QACC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,UAAA,GAAG;YAC1B,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,UAAA,GAAG;YACvB,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,UAAA,GAAG;YACxB,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,UAAA,GAAG;YACzB,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC;QAEF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,YAAY,WAAW,CAAC;IAC5E,CAAC;IAED,qCAAmB,GAAnB;QACC,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACzE,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;YACrB,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;SAC7B;IACF,CAAC;;gBAnED,SAAS,SAAC;oBACV,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,ikBAkBR;iBACF;;;;gBAjCA,UAAU;gBAOF,cAAc,uBA0CpB,QAAQ;;;wBAdT,WAAW,SAAC,eAAe;;IA6C7B,cAAC;CAAA,AApED,CAsB6B,MAAM,GA8ClC;SA9CY,OAAO","sourcesContent":["import {\n\tComponent,\n\tTemplateRef,\n\tHostBinding,\n\tElementRef,\n\tOptional\n} from \"@angular/core\";\nimport { getFocusElementList } from \"./../../common/tab.service\";\n\nimport { Dialog } from \"./../dialog.component\";\nimport { position } from \"@carbon/utils-position\";\nimport { ElementService } from \"./../../utils/utils.module\";\n\n/**\n * Extend the `Dialog` component to create a tooltip for exposing content.\n */\n@Component({\n\tselector: \"ibm-tooltip\",\n\ttemplate: `\n\t\t<div\n\t\t\t#dialog\n\t\t\t[id]=\"dialogConfig.compID\"\n\t\t\t[attr.role]=\"role\"\n\t\t\t[attr.data-floating-menu-direction]=\"placement\"\n\t\t\tclass=\"bx--tooltip bx--tooltip--shown\">\n\t\t\t<span class=\"bx--tooltip__caret\" aria-hidden=\"true\"></span>\n\t\t\t<ng-template\n\t\t\t\t\t*ngIf=\"hasContentTemplate\"\n\t\t\t\t\t[ngTemplateOutlet]=\"dialogConfig.content\"\n\t\t\t\t\t[ngTemplateOutletContext]=\"{tooltip: this}\">\n\t\t\t</ng-template>\n\t\t\t<p\n\t\t\t\t*ngIf=\"!hasContentTemplate\">\n\t\t\t\t{{dialogConfig.content}}\n\t\t\t</p>\n\t\t</div>\n\t\t`\n})\nexport class Tooltip extends Dialog {\n\t@HostBinding(\"style.display\") style = \"inline-block\";\n\t/**\n\t * Value is set to `true` if the `Tooltip` is to display a `TemplateRef` instead of a string.\n\t */\n\tpublic hasContentTemplate = false;\n\t/**\n\t * Sets the role of the tooltip. If there's no focusable content we leave it as a `tooltip`,\n\t * if there _is_ focusable content we switch to the interactive `dialog` role.\n\t */\n\tpublic role = \"tooltip\";\n\n\tconstructor(\n\t\tprotected elementRef: ElementRef,\n\t\t// mark `elementService` as optional since making it mandatory would be a breaking change\n\t\t@Optional() protected elementService: ElementService = null) {\n\t\tsuper(elementRef, elementService);\n\t}\n\n\t/**\n\t * Check whether there is a template for the `Tooltip` content.\n\t */\n\tonDialogInit() {\n\t\tthis.addGap[\"bottom\"] = pos => {\n\t\t\treturn position.addOffset(pos, 3, 0);\n\t\t};\n\t\tthis.addGap[\"top\"] = pos => {\n\t\t\treturn position.addOffset(pos, -10, 0);\n\t\t};\n\t\tthis.addGap[\"left\"] = pos => {\n\t\t\treturn position.addOffset(pos, -3, -6);\n\t\t};\n\t\tthis.addGap[\"right\"] = pos => {\n\t\t\treturn position.addOffset(pos, -3, 6);\n\t\t};\n\n\t\tthis.hasContentTemplate = this.dialogConfig.content instanceof TemplateRef;\n\t}\n\n\tafterDialogViewInit() {\n\t\tconst focusableElements = getFocusElementList(this.dialog.nativeElement);\n\t\tif (focusableElements.length > 0) {\n\t\t\tthis.role = \"dialog\";\n\t\t\tfocusableElements[0].focus();\n\t\t}\n\t}\n}\n"]}