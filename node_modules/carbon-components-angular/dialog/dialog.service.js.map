{"version":3,"file":"dialog.service.js","sourceRoot":"","sources":["../src/dialog/dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tEventEmitter,\n\tInjector,\n\tComponentRef,\n\tComponentFactory,\n\tComponentFactoryResolver,\n\tInjectable,\n\tViewContainerRef\n} from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { DialogConfig } from \"./dialog-config.interface\";\nimport { PlaceholderService } from \"./../placeholder/placeholder.module\";\nimport { Dialog } from \"./dialog.component\";\n\n/**\n * `Dialog` object to be injected into other components.\n */\n@Injectable()\nexport class DialogService {\n\t/**\n\t * Used in `singletonClickListen`, don't count on its existence and values.\n\t */\n\tprotected static listeningForBodyClicks = false;\n\n\t/**\n\t * A set of all known dialog components\n\t */\n\tprotected static dialogRefs = new Set<ComponentRef<Dialog>>();\n\n\t/**\n\t * A `Subscription` that contains all `onClose` subscriptions\n\t */\n\tprotected static dialogCloseSubscription = new Subscription();\n\n\t/**\n\t * Reflects the open or closed state of the `Dialog`.\n\t *\n\t * @deprecated the open state of the dialog should be tracked by the component that creates it\n\t */\n\tpublic isOpen = false;\n\t/**\n\t * To be used to create the component using metadata.\n\t *\n\t * @deprecated\n\t */\n\tpublic componentFactory: ComponentFactory<any>;\n\t/**\n\t * To emit the `Dialog` closing event.\n\t */\n\tpublic onClose: EventEmitter<any> = new EventEmitter();\n\t/**\n\t * Holds reference to the created `Dialog` component after creation.\n\t *\n\t * @deprecated components should track local `dialogRefs` themselves\n\t */\n\tpublic dialogRef: ComponentRef<any>;\n\n\t/**\n\t * Emits the state `true` if the Dialog is closed, false if `Dialog`\n\t * is opened/viewable.\n\t *\n\t * @deprecated components should simply bind to the dialogRefs `close` emitter\n\t */\n\tisClosed: EventEmitter<any> = new EventEmitter();\n\n\t/**\n\t * To watch the event that closes the `Dialog`.\n\t *\n\t * @deprecated in favor of `DialogService.dialogCloseSubscription`\n\t */\n\tprotected dialogSubscription: Subscription;\n\n\t/**\n\t * Creates an instance of `DialogService`.\n\t */\n\tconstructor(\n\t\tprotected componentFactoryResolver: ComponentFactoryResolver,\n\t\tprotected injector: Injector,\n\t\tprotected placeholderService: PlaceholderService\n\t) {}\n\n\t/**\n\t * Uses module `componentFactory` to create the `Dialog` component.\n\t *\n\t * Useful for components that extend `Dialog` and don't want to re-implement `open`\n\t *\n\t * @deprecated TODO: a better way for individual instances to hook into `DialogService#open`\n\t */\n\tcreate(component) {\n\t\tthis.componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n\t}\n\n\t/**\n\t * Toggles between `Dialog` open/close states.\n\t *\n\t * @deprecated components should implement their own `toggle` with the `close` and `open` methods\n\t */\n\ttoggle(viewContainer: ViewContainerRef, dialogConfig: DialogConfig) {\n\t\tif (this.isOpen) {\n\t\t\tthis.close(viewContainer);\n\t\t} else {\n\t\t\tthis.open(viewContainer, dialogConfig);\n\t\t}\n\t}\n\n\t/**\n\t * If `dialogRef` is defined, the Dialog is already open. If\n\t * `dialogRef` is undefined, we create the `Dialog` component and reference to it.\n\t * A subscription is created to track if the `Dialog` should close.\n\t *\n\t * @param viewContainer a `ViewContainerRef` to instantiate the component against.\n\t * May be `null` if an `ibm-placeholder` exists and `dialogConfig.appendInline` is false\n\t * @param dialogConfig the `DialogConfig` for the component\n\t */\n\topen(viewContainer: ViewContainerRef, dialogConfig: DialogConfig, component?: any) {\n\t\tlet componentFactory = this.componentFactory;\n\t\tif (component) {\n\t\t\tcomponentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n\t\t}\n\n\t\tlet dialogRef;\n\t\tif (dialogConfig.appendInline) {\n\t\t\t// add our component to the view\n\t\t\tdialogRef = viewContainer.createComponent(componentFactory, 0, this.injector);\n\t\t} else if (!this.placeholderService.hasPlaceholderRef()) {\n\t\t\tdialogRef = viewContainer.createComponent(componentFactory, 0, this.injector);\n\t\t\tsetTimeout(() => {\n\t\t\t\twindow.document.querySelector(\"body\").appendChild(this.dialogRef.location.nativeElement);\n\t\t\t});\n\t\t} else {\n\t\t\tdialogRef = this.placeholderService.createComponent(componentFactory, this.injector);\n\t\t}\n\n\t\t// keep track of all initialized dialogs\n\t\tDialogService.dialogRefs.add(dialogRef);\n\n\t\t// initialize some extra options\n\t\tdialogConfig[\"previouslyFocusedElement\"] = document.activeElement;\n\t\tdialogRef.instance.dialogConfig = dialogConfig;\n\t\tthis.onClose = dialogRef.instance.close;\n\t\tthis.isOpen = true;\n\n\t\tconst closeSubscription = this.onClose.subscribe(() => {\n\t\t\tif (dialogConfig.shouldClose && dialogConfig.shouldClose()) {\n\t\t\t\tthis.close(viewContainer, dialogRef);\n\t\t\t}\n\t\t});\n\n\t\t// keep track of all dialog subscriptions\n\t\tDialogService.dialogCloseSubscription.add(closeSubscription);\n\n\t\tdialogRef.instance.elementRef.nativeElement.focus();\n\n\t\t// deprecated - kept for API compatibility\n\t\tthis.dialogRef = dialogRef;\n\n\t\t// deprecated - kept for API compatibility\n\t\tthis.dialogSubscription = closeSubscription;\n\n\t\t// return `this` for easy method chaining\n\t\t// TODO v11: return `dialogRef` instead\n\t\treturn this;\n\t}\n\n\t/**\n\t * On close of `Dialog` item, sets focus back to previous item, unsets\n\t * the current `dialogRef` item. Unsubscribes to the event of `Dialog` close.\n\t *\n\t * @param viewContainer deprecated - does nothing. null may safely be passed\n\t * @param dialogRef the dialogRef to close\n\t */\n\tclose(viewContainer: ViewContainerRef, dialogRef: ComponentRef<Dialog> = this.dialogRef) {\n\t\tthis.isClosed.emit(true);\n\n\t\t// to handle the case where we have a null `this.dialogRef`\n\t\tif (!dialogRef) { return; }\n\n\t\tconst elementToFocus = dialogRef.instance.dialogConfig[\"previouslyFocusedElement\"];\n\n\t\tdialogRef.destroy();\n\n\t\tif (DialogService.dialogRefs.has(dialogRef)) {\n\t\t\tDialogService.dialogRefs.delete(dialogRef);\n\t\t}\n\n\t\tthis.dialogRef = null;\n\t\tthis.isOpen = false;\n\t\telementToFocus.focus();\n\n\t\tif (this.dialogSubscription) {\n\t\t\tthis.dialogSubscription.unsubscribe();\n\t\t}\n\t}\n\n\t/**\n\t * Closes all known `Dialog`s. Does not focus any previous elements, since we can't know which would be correct\n\t */\n\tcloseAll() {\n\t\tDialogService.dialogRefs.forEach(ref => ref.destroy());\n\t\tDialogService.dialogRefs.clear();\n\t\tDialogService.dialogCloseSubscription.unsubscribe();\n\t\tthis.isClosed.emit(true);\n\n\t\t// kept for API compat\n\t\tthis.dialogRef = null;\n\t\tthis.isOpen = false;\n\t}\n\n\t/**\n\t * Fix for safari hijacking clicks.\n\t *\n\t * Runs on `ngOnInit` of every dialog. Ensures we don't have multiple listeners\n\t * because having many of them could degrade performance in certain cases (and is\n\t * not necessary for our use case)\n\t *\n\t * This is an internally used function, can change at any point (even get removed)\n\t * and changes to it won't be considered a breaking change. Use at your own risk.\n\t */\n\tsingletonClickListen() {\n\t\tif (!DialogService.listeningForBodyClicks) {\n\t\t\tdocument.body.firstElementChild.addEventListener(\"click\", () => null, true);\n\t\t\tDialogService.listeningForBodyClicks = true;\n\t\t}\n\t}\n}\n"]}