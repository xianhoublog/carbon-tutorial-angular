/**
 *
 * carbon-angular v0.0.0 | overflow-menu-pane.component.ngfactory.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./overflow-menu-pane.component";
import * as i3 from "../../i18n/i18n.service";
import * as i4 from "../../experimental.service";
import * as i5 from "../../utils/element.service";
var styles_OverflowMenuPane = [];
var RenderType_OverflowMenuPane = i0.ɵcrt({ encapsulation: 2, styles: styles_OverflowMenuPane, data: {} });
export { RenderType_OverflowMenuPane as RenderType_OverflowMenuPane };
function View_OverflowMenuPane_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }
export function View_OverflowMenuPane_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { dialog: 0 }), (_l()(), i0.ɵeld(1, 0, [[1, 0], ["dialog", 1]], null, 5, "ul", [["class", "bx--overflow-menu-options bx--overflow-menu-options--open"], ["role", "menu"]], [[1, "aria-label", 0], [1, "aria-label", 0]], [[null, "click"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("click" === en)) {
        var pd_0 = (_co.doClose() !== false);
        ad = (pd_0 && ad);
    } return ad; }, null, null)), i0.ɵdid(2, 278528, null, 0, i1.NgClass, [i0.IterableDiffers, i0.KeyValueDiffers, i0.ElementRef, i0.Renderer2], { klass: [0, "klass"], ngClass: [1, "ngClass"] }, null), i0.ɵpod(3, { "bx--overflow-menu--flip": 0 }), (_l()(), i0.ɵand(16777216, null, null, 2, null, View_OverflowMenuPane_1)), i0.ɵdid(5, 540672, null, 0, i1.NgTemplateOutlet, [i0.ViewContainerRef], { ngTemplateOutletContext: [0, "ngTemplateOutletContext"], ngTemplateOutlet: [1, "ngTemplateOutlet"] }, null), i0.ɵpod(6, { overflowMenu: 0 })], function (_ck, _v) { var _co = _v.component; var currVal_2 = "bx--overflow-menu-options bx--overflow-menu-options--open"; var currVal_3 = _ck(_v, 3, 0, _co.dialogConfig.flip); _ck(_v, 2, 0, currVal_2, currVal_3); var currVal_4 = _ck(_v, 6, 0, _co); var currVal_5 = _co.dialogConfig.content; _ck(_v, 5, 0, currVal_4, currVal_5); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.dialogConfig.menuLabel; var currVal_1 = _co.dialogConfig.menuLabel; _ck(_v, 1, 0, currVal_0, currVal_1); }); }
export function View_OverflowMenuPane_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "ibm-overflow-menu-pane", [], null, [[null, "keydown"], ["document", "click"]], function (_v, en, $event) { var ad = true; if (("keydown" === en)) {
        var pd_0 = (i0.ɵnov(_v, 1).hostkeys($event) !== false);
        ad = (pd_0 && ad);
    } if (("document:click" === en)) {
        var pd_1 = (i0.ɵnov(_v, 1).clickClose($event) !== false);
        ad = (pd_1 && ad);
    } return ad; }, View_OverflowMenuPane_0, RenderType_OverflowMenuPane)), i0.ɵdid(1, 4440064, null, 0, i2.OverflowMenuPane, [i0.ElementRef, i3.I18n, i4.ExperimentalService, [2, i5.ElementService]], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }
var OverflowMenuPaneNgFactory = i0.ɵccf("ibm-overflow-menu-pane", i2.OverflowMenuPane, View_OverflowMenuPane_Host_0, { dialogConfig: "dialogConfig" }, { close: "close" }, []);
export { OverflowMenuPaneNgFactory as OverflowMenuPaneNgFactory };
//# sourceMappingURL=overflow-menu-pane.component.ngfactory.js.map