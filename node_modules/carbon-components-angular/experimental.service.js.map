{"version":3,"file":"experimental.service.js","sourceRoot":"","sources":["src/experimental.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAU3C;IAAA;QAwBC;;WAEG;QACK,gBAAW,GAAG,IAAI,GAAG,EAAsB,CAAC;IAgDrD,CAAC;IA/DA,sBAAI,+CAAc;QAIlB;;;WAGG;aACH;YACC,OAAO,mBAAmB,CAAC,mBAAmB,CAAC;QAChD,CAAC;QAdD;;;WAGG;aACH,UAAmB,CAAU;YAC5B,mBAAmB,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7C,CAAC;;;OAAA;IAeD;;OAEG;IACH,2CAAa,GAAb,UAAc,IAAY,EAAE,OAAsC;QAAtC,wBAAA,EAAA,YAAuB,OAAO,EAAE,KAAK,EAAC;QACjE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACpC;IACF,CAAC;IAED;;;OAGG;IACH,8CAAgB,GAAhB,UAAiB,IAAY;QAC5B,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5C,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,+CAAiB,GAAjB,UAAkB,IAAY;QAC7B,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5C,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,2CAAa,GAAb,UAAc,IAAY;QACzB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAChC;QAED,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,4CAAc,GAAd;QACC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC;IAC/C,CAAC;IAxED;;;OAGG;IACI,uCAAmB,GAAG,IAAI,CAAC;;gBANlC,UAAU;;IA2EX,0BAAC;CAAA,AA3ED,IA2EC;SA1EY,mBAAmB","sourcesContent":["import { Injectable } from \"@angular/core\";\n\n/**\n * Represents options for an experiment. The only required property is `enabled`, however other options may be supplied.\n */\nexport interface Experiment {\n\tenabled: boolean;\n\t[key: string]: any;\n}\n\n@Injectable()\nexport class ExperimentalService {\n\t/**\n\t * Tracks if the v10 experimental mode is enabled\n\t * @deprecated since v3\n\t */\n\tstatic experimentalEnabled = true;\n\n\t/**\n\t * Sets the v10 experimental mode\n\t * @deprecated since v3\n\t */\n\tset isExperimental(v: boolean) {\n\t\tExperimentalService.experimentalEnabled = v;\n\t}\n\n\t/**\n\t * Gets the state of the v10 experimental mode\n\t * @deprecated since v3\n\t */\n\tget isExperimental() {\n\t\treturn ExperimentalService.experimentalEnabled;\n\t}\n\n\t/**\n\t * Map to hold all our experiments\n\t */\n\tprivate experiments = new Map<string, Experiment>();\n\n\t/**\n\t * Adds an experiment if it doesn't exist.\n\t */\n\taddExperiment(name: string, options: Experiment = {enabled: false}) {\n\t\tif (!this.experiments.has(name)) {\n\t\t\tthis.experiments.set(name, options);\n\t\t}\n\t}\n\n\t/**\n\t * Enables an experiment by name\n\t * @param name name of the experiment to enable\n\t */\n\tenableExperiment(name: string) {\n\t\tconst experiment = this.getExperiment(name);\n\t\texperiment.enabled = true;\n\t}\n\n\t/**\n\t * Disables an experiment by name\n\t * @param name name of the experiment to disable\n\t */\n\tdisableExperiment(name: string) {\n\t\tconst experiment = this.getExperiment(name);\n\t\texperiment.enabled = false;\n\t}\n\n\t/**\n\t * Get the options for an experiment by name\n\t * @param name name of experiment to get\n\t */\n\tgetExperiment(name: string): Experiment {\n\t\tif (!this.experiments.has(name)) {\n\t\t\tthis.addExperiment(name);\n\t\t\treturn this.getExperiment(name);\n\t\t}\n\n\t\treturn this.experiments.get(name);\n\t}\n\n\t/**\n\t * Get an array of tuples representing an experiment and it's options\n\t */\n\tgetExperiments(): Array<[string, Experiment]> {\n\t\treturn Array.from(this.experiments.entries());\n\t}\n}\n"]}