import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var WarningAlt16 = /** @class */ (function () {
    function WarningAlt16() {
        this.focusable = false;
    }
    WarningAlt16.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-warning-alt16",
                    template: "\n    <svg\n      ibmIconWarningAlt16\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    WarningAlt16.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return WarningAlt16;
}());
export { WarningAlt16 };
var WarningAlt16Directive = /** @class */ (function () {
    function WarningAlt16Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    WarningAlt16Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M14.5,14h-13c-0.2,0-0.3-0.1-0.4-0.2c-0.1-0.2-0.1-0.3,0-0.5l6.5-12C7.7,1,8,0.9,8.2,1.1c0.1,0,0.2,0.1,0.2,0.2l6.5,12\tc0.1,0.2,0.1,0.3,0,0.5C14.9,13.9,14.7,14,14.5,14z M2.3,13h11.3L8,2.5L2.3,13z\"></path><path d=\"M7.5 6H8.5V9.5H7.5zM8 10.8c-.4 0-.8.3-.8.8s.3.8.8.8c.4 0 .8-.3.8-.8S8.4 10.8 8 10.8z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 16,
            height: 16,
            viewBox: "0 0 16 16",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WarningAlt16Directive.titleIdCounter++;
            title.setAttribute("id", "warning-alt16-" + WarningAlt16Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "warning-alt16-" + WarningAlt16Directive.titleIdCounter);
        }
    };
    WarningAlt16Directive.titleIdCounter = 0;
    WarningAlt16Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconWarningAlt16]"
                },] },
    ];
    /** @nocollapse */
    WarningAlt16Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    WarningAlt16Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return WarningAlt16Directive;
}());
export { WarningAlt16Directive };
var WarningAlt16Module = /** @class */ (function () {
    function WarningAlt16Module() {
    }
    WarningAlt16Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        WarningAlt16,
                        WarningAlt16Directive
                    ],
                    exports: [
                        WarningAlt16,
                        WarningAlt16Directive
                    ]
                },] },
    ];
    return WarningAlt16Module;
}());
export { WarningAlt16Module };
//# sourceMappingURL=16.js.map