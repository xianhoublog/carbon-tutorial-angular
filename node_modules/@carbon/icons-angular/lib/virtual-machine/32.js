import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var VirtualMachine32 = /** @class */ (function () {
    function VirtualMachine32() {
        this.focusable = false;
    }
    VirtualMachine32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-virtual-machine32",
                    template: "\n    <svg\n      ibmIconVirtualMachine32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    VirtualMachine32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return VirtualMachine32;
}());
export { VirtualMachine32 };
var VirtualMachine32Directive = /** @class */ (function () {
    function VirtualMachine32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    VirtualMachine32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M20,13H12a2.0025,2.0025,0,0,0-2,2V28a2.0025,2.0025,0,0,0,2,2h8a2.0025,2.0025,0,0,0,2-2V15A2.0025,2.0025,0,0,0,20,13Zm0,2,0,3H12V15Zm0,5,0,3H12V20Zm-8,8V25h8v3Z\"></path><path d=\"M25.91,10.13a.121.121,0,0,1-.0967-.0952A10.0061,10.0061,0,0,0,17.89,2.1816,10.0025,10.0025,0,0,0,6.1858,10.0347a.1212.1212,0,0,1-.0964.0957A7.5019,7.5019,0,0,0,7.4912,25H8V23H7.4954a5.5108,5.5108,0,0,1-5.4387-6.3,5.6992,5.6992,0,0,1,4.7138-4.6606l1.0166-.1836a.1306.1306,0,0,0,.1045-.1035l.18-.9351a8.28,8.28,0,0,1,6.8469-6.7427,7.957,7.957,0,0,1,2.8471.1245,8.22,8.22,0,0,1,6.1475,6.545l.1941,1.0083a.13.13,0,0,0,.1045.1035l1.0576.1914a5.7819,5.7819,0,0,1,3.1011,1.539A5.5052,5.5052,0,0,1,24.5076,23H24v2h.5076A7.5019,7.5019,0,0,0,25.91,10.13Z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            VirtualMachine32Directive.titleIdCounter++;
            title.setAttribute("id", "virtual-machine32-" + VirtualMachine32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "virtual-machine32-" + VirtualMachine32Directive.titleIdCounter);
        }
    };
    VirtualMachine32Directive.titleIdCounter = 0;
    VirtualMachine32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconVirtualMachine32]"
                },] },
    ];
    /** @nocollapse */
    VirtualMachine32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    VirtualMachine32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return VirtualMachine32Directive;
}());
export { VirtualMachine32Directive };
var VirtualMachine32Module = /** @class */ (function () {
    function VirtualMachine32Module() {
    }
    VirtualMachine32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        VirtualMachine32,
                        VirtualMachine32Directive
                    ],
                    exports: [
                        VirtualMachine32,
                        VirtualMachine32Directive
                    ]
                },] },
    ];
    return VirtualMachine32Module;
}());
export { VirtualMachine32Module };
//# sourceMappingURL=32.js.map