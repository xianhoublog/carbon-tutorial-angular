import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var VolumeDown16 = /** @class */ (function () {
    function VolumeDown16() {
        this.focusable = false;
    }
    VolumeDown16.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-volume-down16",
                    template: "\n    <svg\n      ibmIconVolumeDown16\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    VolumeDown16.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return VolumeDown16;
}());
export { VolumeDown16 };
var VolumeDown16Directive = /** @class */ (function () {
    function VolumeDown16Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    VolumeDown16Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M25.1 10.66L23.58 12a6 6 0 0 1-.18 7.94l1.47 1.36a8 8 0 0 0 .23-10.59zM20 30a1 1 0 0 1-.71-.3L11.67 22H5a1 1 0 0 1-1-1H4V11a1 1 0 0 1 1-1h6.67l7.62-7.7a1 1 0 0 1 1.41 0A1 1 0 0 1 21 3V29A1 1 0 0 1 20 30zM6 20h6a1.17 1.17 0 0 1 .79.3L19 26.57V5.43L12.79 11.7A1.17 1.17 0 0 1 12 12H6z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 16,
            height: 16,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            VolumeDown16Directive.titleIdCounter++;
            title.setAttribute("id", "volume-down16-" + VolumeDown16Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "volume-down16-" + VolumeDown16Directive.titleIdCounter);
        }
    };
    VolumeDown16Directive.titleIdCounter = 0;
    VolumeDown16Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconVolumeDown16]"
                },] },
    ];
    /** @nocollapse */
    VolumeDown16Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    VolumeDown16Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return VolumeDown16Directive;
}());
export { VolumeDown16Directive };
var VolumeDown16Module = /** @class */ (function () {
    function VolumeDown16Module() {
    }
    VolumeDown16Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        VolumeDown16,
                        VolumeDown16Directive
                    ],
                    exports: [
                        VolumeDown16,
                        VolumeDown16Directive
                    ]
                },] },
    ];
    return VolumeDown16Module;
}());
export { VolumeDown16Module };
//# sourceMappingURL=16.js.map