import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var DragVertical20 = /** @class */ (function () {
    function DragVertical20() {
        this.focusable = false;
    }
    DragVertical20.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-drag-vertical20",
                    template: "\n    <svg\n      ibmIconDragVertical20\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    DragVertical20.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return DragVertical20;
}());
export { DragVertical20 };
var DragVertical20Directive = /** @class */ (function () {
    function DragVertical20Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    DragVertical20Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4 20L15 20 15 26.17 12.41 23.59 11 25 16 30 21 25 19.59 23.59 17 26.17 17 20 28 20 28 18 4 18 4 20zM11 7L12.41 8.41 15 5.83 15 12 4 12 4 14 28 14 28 12 17 12 17 5.83 19.59 8.41 21 7 16 2 11 7z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 20,
            height: 20,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            DragVertical20Directive.titleIdCounter++;
            title.setAttribute("id", "drag-vertical20-" + DragVertical20Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "drag-vertical20-" + DragVertical20Directive.titleIdCounter);
        }
    };
    DragVertical20Directive.titleIdCounter = 0;
    DragVertical20Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconDragVertical20]"
                },] },
    ];
    /** @nocollapse */
    DragVertical20Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DragVertical20Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return DragVertical20Directive;
}());
export { DragVertical20Directive };
var DragVertical20Module = /** @class */ (function () {
    function DragVertical20Module() {
    }
    DragVertical20Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DragVertical20,
                        DragVertical20Directive
                    ],
                    exports: [
                        DragVertical20,
                        DragVertical20Directive
                    ]
                },] },
    ];
    return DragVertical20Module;
}());
export { DragVertical20Module };
//# sourceMappingURL=20.js.map