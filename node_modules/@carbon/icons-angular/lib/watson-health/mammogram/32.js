import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var WatsonHealthMammogram32 = /** @class */ (function () {
    function WatsonHealthMammogram32() {
        this.focusable = false;
    }
    WatsonHealthMammogram32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-watson-health-mammogram32",
                    template: "\n    <svg\n      ibmIconWatsonHealthMammogram32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    WatsonHealthMammogram32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return WatsonHealthMammogram32;
}());
export { WatsonHealthMammogram32 };
var WatsonHealthMammogram32Directive = /** @class */ (function () {
    function WatsonHealthMammogram32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    WatsonHealthMammogram32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M25 32L32 32 32 25 30 25 30 30 25 30 25 32zM25 27H22V17h3a3.0033 3.0033 0 0 1 3 3v4A3.0033 3.0033 0 0 1 25 27zm-1-2h1a1.0006 1.0006 0 0 0 1-1V20a1.0006 1.0006 0 0 0-1-1H24zM20 27H14V23a2.002 2.002 0 0 1 2-2h2V19H14V17h4a2.0023 2.0023 0 0 1 2 2v2a2.0023 2.0023 0 0 1-2 2H16v2h4zM25 15H22V5h3a3.0033 3.0033 0 0 1 3 3v4A3.0033 3.0033 0 0 1 25 15zm-1-2h1a1.0009 1.0009 0 0 0 1-1V8a1.0009 1.0009 0 0 0-1-1H24zM18 5H14V7h4V9H15v2h3v2H14v2h4a2.0027 2.0027 0 0 0 2-2V7A2.0023 2.0023 0 0 0 18 5zM10 27H8V23.9541C3.2847 23.5117 2 19.9443 2 18c0-3.0146 2.082-4.5015 3.9189-5.814C7.5723 11.0054 9 9.9854 9 8V5h2V8c0 3.0146-2.082 4.5015-3.9189 5.814C5.4277 14.9946 4 16.0146 4 18c.0054.4033.1914 4 5 4a1 1 0 0 1 1 1zM7 0L0 0 0 7 2 7 2 2 7 2 7 0z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WatsonHealthMammogram32Directive.titleIdCounter++;
            title.setAttribute("id", "watson-health-mammogram32-" + WatsonHealthMammogram32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "watson-health-mammogram32-" + WatsonHealthMammogram32Directive.titleIdCounter);
        }
    };
    WatsonHealthMammogram32Directive.titleIdCounter = 0;
    WatsonHealthMammogram32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconWatsonHealthMammogram32]"
                },] },
    ];
    /** @nocollapse */
    WatsonHealthMammogram32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    WatsonHealthMammogram32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return WatsonHealthMammogram32Directive;
}());
export { WatsonHealthMammogram32Directive };
var WatsonHealthMammogram32Module = /** @class */ (function () {
    function WatsonHealthMammogram32Module() {
    }
    WatsonHealthMammogram32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        WatsonHealthMammogram32,
                        WatsonHealthMammogram32Directive
                    ],
                    exports: [
                        WatsonHealthMammogram32,
                        WatsonHealthMammogram32Directive
                    ]
                },] },
    ];
    return WatsonHealthMammogram32Module;
}());
export { WatsonHealthMammogram32Module };
//# sourceMappingURL=32.js.map