import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var TextLink32 = /** @class */ (function () {
    function TextLink32() {
        this.focusable = false;
    }
    TextLink32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-text-link32",
                    template: "\n    <svg\n      ibmIconTextLink32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    TextLink32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return TextLink32;
}());
export { TextLink32 };
var TextLink32Directive = /** @class */ (function () {
    function TextLink32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    TextLink32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M18.7061,27.585a5.2615,5.2615,0,0,1-3.7227-8.9834l1.415,1.414a3.2638,3.2638,0,1,0,4.6153,4.6162l6.03-6.03a3.264,3.264,0,0,0-4.6162-4.6158l-1.414-1.414a5.2637,5.2637,0,0,1,7.4443,7.4438l-6.03,6.03A5.2461,5.2461,0,0,1,18.7061,27.585Z\"></path><path d=\"M10.2642 29.9971A5.2619 5.2619 0 0 1 6.542 21.0137l6.03-6.03a5.2636 5.2636 0 1 1 7.4438 7.4438l-1.414-1.414a3.2639 3.2639 0 1 0-4.6158-4.6158l-6.03 6.03a3.264 3.264 0 0 0 4.6157 4.6162l1.414 1.4141A5.2452 5.2452 0 0 1 10.2642 29.9971zM2 10H10V12H2zM2 6H14V8H2zM2 2H14V4H2z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            TextLink32Directive.titleIdCounter++;
            title.setAttribute("id", "text-link32-" + TextLink32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "text-link32-" + TextLink32Directive.titleIdCounter);
        }
    };
    TextLink32Directive.titleIdCounter = 0;
    TextLink32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconTextLink32]"
                },] },
    ];
    /** @nocollapse */
    TextLink32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    TextLink32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return TextLink32Directive;
}());
export { TextLink32Directive };
var TextLink32Module = /** @class */ (function () {
    function TextLink32Module() {
    }
    TextLink32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TextLink32,
                        TextLink32Directive
                    ],
                    exports: [
                        TextLink32,
                        TextLink32Directive
                    ]
                },] },
    ];
    return TextLink32Module;
}());
export { TextLink32Module };
//# sourceMappingURL=32.js.map