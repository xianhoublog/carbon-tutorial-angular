import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var LogoDigg32 = /** @class */ (function () {
    function LogoDigg32() {
        this.focusable = false;
    }
    LogoDigg32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-logo-digg32",
                    template: "\n    <svg\n      ibmIconLogoDigg32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    LogoDigg32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return LogoDigg32;
}());
export { LogoDigg32 };
var LogoDigg32Directive = /** @class */ (function () {
    function LogoDigg32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    LogoDigg32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M6.48 7.6v3.92H2V21H9.28V7.6zm0 11.2H4.8v-5H6.48zM10.4 11.52H13.2V21.04H10.4zM10.4 7.6H13.2V10.399999999999999H10.4zM14.32 11.52V21H18.8v1.12H14.32V24.4H21.6V11.52zM18.8 18.8H17.12v-5H18.8zM22.72 11.52V21H27.2v1.12H22.72V24.4H30V11.52zM27.2 18.8H25.52v-5H27.2z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            LogoDigg32Directive.titleIdCounter++;
            title.setAttribute("id", "logo-digg32-" + LogoDigg32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "logo-digg32-" + LogoDigg32Directive.titleIdCounter);
        }
    };
    LogoDigg32Directive.titleIdCounter = 0;
    LogoDigg32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconLogoDigg32]"
                },] },
    ];
    /** @nocollapse */
    LogoDigg32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    LogoDigg32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return LogoDigg32Directive;
}());
export { LogoDigg32Directive };
var LogoDigg32Module = /** @class */ (function () {
    function LogoDigg32Module() {
    }
    LogoDigg32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        LogoDigg32,
                        LogoDigg32Directive
                    ],
                    exports: [
                        LogoDigg32,
                        LogoDigg32Directive
                    ]
                },] },
    ];
    return LogoDigg32Module;
}());
export { LogoDigg32Module };
//# sourceMappingURL=32.js.map