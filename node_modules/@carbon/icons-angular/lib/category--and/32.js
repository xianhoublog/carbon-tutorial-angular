import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var CategoryAnd32 = /** @class */ (function () {
    function CategoryAnd32() {
        this.focusable = false;
    }
    CategoryAnd32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-category-and32",
                    template: "\n    <svg\n      ibmIconCategoryAnd32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    CategoryAnd32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return CategoryAnd32;
}());
export { CategoryAnd32 };
var CategoryAnd32Directive = /** @class */ (function () {
    function CategoryAnd32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    CategoryAnd32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4 30V26H15v4h2V26H28v4h2V26a2 2 0 0 0-2-2H17V19H15v5H4a2 2 0 0 0-2 2v4zM20.6953 13.9858A10.08 10.08 0 0 0 21.9463 10H23V8H20V9a9.2634 9.2634 0 0 1-.6641 3.2705L16.6511 8.8816a5.1261 5.1261 0 0 0 2.1436-2.3694A3.2522 3.2522 0 0 0 18.6062 3.81a3.38 3.38 0 0 0-2.2391-1.7056 3.4688 3.4688 0 0 0-4.2223 2.1186c-.5044 1.5518.4406 3.1158 1.2612 4.1077A4.7255 4.7255 0 0 0 11.06 13.1587 4.4526 4.4526 0 0 0 15.4268 17h.0058a5.7844 5.7844 0 0 0 3.9717-1.4233L20.532 17h2.5519zM14.047 4.8413A1.3224 1.3224 0 0 1 15.4141 4a2.41 2.41 0 0 1 .5214.0581 1.4018 1.4018 0 0 1 .9111.7022 1.2493 1.2493 0 0 1 .0791 1.042A3.6871 3.6871 0 0 1 15.2441 7.395C14.5831 6.6816 13.8087 5.5732 14.047 4.8413zM15.4316 15h-.0039a2.4432 2.4432 0 0 1-2.3916-2.1509 2.8261 2.8261 0 0 1 1.81-3.0249l3.3115 4.1787A3.8853 3.8853 0 0 1 15.4316 15z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            CategoryAnd32Directive.titleIdCounter++;
            title.setAttribute("id", "category-and32-" + CategoryAnd32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "category-and32-" + CategoryAnd32Directive.titleIdCounter);
        }
    };
    CategoryAnd32Directive.titleIdCounter = 0;
    CategoryAnd32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconCategoryAnd32]"
                },] },
    ];
    /** @nocollapse */
    CategoryAnd32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CategoryAnd32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return CategoryAnd32Directive;
}());
export { CategoryAnd32Directive };
var CategoryAnd32Module = /** @class */ (function () {
    function CategoryAnd32Module() {
    }
    CategoryAnd32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CategoryAnd32,
                        CategoryAnd32Directive
                    ],
                    exports: [
                        CategoryAnd32,
                        CategoryAnd32Directive
                    ]
                },] },
    ];
    return CategoryAnd32Module;
}());
export { CategoryAnd32Module };
//# sourceMappingURL=32.js.map