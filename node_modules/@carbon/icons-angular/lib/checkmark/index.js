import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var CheckmarkComponent = /** @class */ (function () {
    function CheckmarkComponent() {
        this.focusable = false;
    }
    CheckmarkComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-checkmark",
                    template: "\n    <svg\n      ibmIconCheckmark\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    CheckmarkComponent.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }],
        size: [{ type: Input }]
    };
    return CheckmarkComponent;
}());
export { CheckmarkComponent };
var CheckmarkDirective = /** @class */ (function () {
    function CheckmarkDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "16": {
                metadata: { "filename": "checkmark.svg", "basename": "checkmark", "size": 16, "prefix": ["16"], "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 16 16", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M6 10.6L2.5 7.1 1.8 7.8 5.3 11.3 6 12 13.1 4.9 12.4 4.2z" } }], "name": "checkmark", "size": 16 }, "moduleName": "Checkmark16", "outputOptions": { "file": "ts/checkmark/16.ts" }, "namespace": "checkmark" },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M6 10.6L2.5 7.1 1.8 7.8 5.3 11.3 6 12 13.1 4.9 12.4 4.2z\"></path></svg>"
            },
            "20": {
                metadata: { "filename": "checkmark.svg", "basename": "checkmark", "size": 20, "prefix": ["20"], "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 20 20", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M8 13.2L3.6 8.8 2.7 9.7 7.1 14.1 8 15 16.5 6.5 15.6 5.6z" } }, { "elem": "path", "attrs": { "d": "M15.6 5.6L8 13.2 3.6 8.8 2.7 9.7 7.1 14.1 8 15 16.5 6.5 15.6 5.6z" } }], "name": "checkmark", "size": 20 }, "moduleName": "Checkmark20", "outputOptions": { "file": "ts/checkmark/20.ts" }, "namespace": "checkmark" },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" aria-hidden=\"true\"><path d=\"M8 13.2L3.6 8.8 2.7 9.7 7.1 14.1 8 15 16.5 6.5 15.6 5.6z\"></path><path d=\"M15.6 5.6L8 13.2 3.6 8.8 2.7 9.7 7.1 14.1 8 15 16.5 6.5 15.6 5.6z\"></path></svg>"
            },
            "24": {
                metadata: { "filename": "checkmark.svg", "basename": "checkmark", "size": 24, "prefix": ["24"], "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 24 24", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M10 15.9L4.7 10.6 3.6 11.6 8.9 16.9 10 18 20.6 7.4 19.5 6.3z" } }], "name": "checkmark", "size": 24 }, "moduleName": "Checkmark24", "outputOptions": { "file": "ts/checkmark/24.ts" }, "namespace": "checkmark" },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M10 15.9L4.7 10.6 3.6 11.6 8.9 16.9 10 18 20.6 7.4 19.5 6.3z\"></path></svg>"
            },
            "32": {
                metadata: { "filename": "checkmark.svg", "basename": "checkmark", "size": 32, "prefix": ["32"], "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M13 21.2L5.9 14.1 4.5 15.5 11.6 22.6 13 24 27.1 9.9 25.7 8.4z" } }], "name": "checkmark", "size": 32 }, "moduleName": "Checkmark32", "outputOptions": { "file": "ts/checkmark/32.ts" }, "namespace": "checkmark" },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M13 21.2L5.9 14.1 4.5 15.5 11.6 22.6 13 24 27.1 9.9 25.7 8.4z\"></path></svg>"
            },
        };
    }
    CheckmarkDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            CheckmarkDirective.titleIdCounter++;
            title.setAttribute("id", "checkmark-" + CheckmarkDirective.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "checkmark-" + CheckmarkDirective.titleIdCounter);
        }
    };
    CheckmarkDirective.titleIdCounter = 0;
    CheckmarkDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconCheckmark]"
                },] },
    ];
    /** @nocollapse */
    CheckmarkDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CheckmarkDirective.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }],
        size: [{ type: Input }]
    };
    return CheckmarkDirective;
}());
export { CheckmarkDirective };
var CheckmarkModule = /** @class */ (function () {
    function CheckmarkModule() {
    }
    CheckmarkModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CheckmarkComponent,
                        CheckmarkDirective,
                    ],
                    exports: [
                        CheckmarkComponent,
                        CheckmarkDirective,
                    ]
                },] },
    ];
    return CheckmarkModule;
}());
export { CheckmarkModule };
//# sourceMappingURL=index.js.map