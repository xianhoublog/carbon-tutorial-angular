import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var ArrowDownLeft16 = /** @class */ (function () {
    function ArrowDownLeft16() {
        this.focusable = false;
    }
    ArrowDownLeft16.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-arrow-down-left16",
                    template: "\n    <svg\n      ibmIconArrowDownLeft16\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    ArrowDownLeft16.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return ArrowDownLeft16;
}());
export { ArrowDownLeft16 };
var ArrowDownLeft16Directive = /** @class */ (function () {
    function ArrowDownLeft16Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    ArrowDownLeft16Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M22 26L22 24 9.41 24 26 7.41 24.59 6 8 22.59 8 10 6 10 6 26 22 26z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 16,
            height: 16,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            ArrowDownLeft16Directive.titleIdCounter++;
            title.setAttribute("id", "arrow-down-left16-" + ArrowDownLeft16Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "arrow-down-left16-" + ArrowDownLeft16Directive.titleIdCounter);
        }
    };
    ArrowDownLeft16Directive.titleIdCounter = 0;
    ArrowDownLeft16Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconArrowDownLeft16]"
                },] },
    ];
    /** @nocollapse */
    ArrowDownLeft16Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ArrowDownLeft16Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return ArrowDownLeft16Directive;
}());
export { ArrowDownLeft16Directive };
var ArrowDownLeft16Module = /** @class */ (function () {
    function ArrowDownLeft16Module() {
    }
    ArrowDownLeft16Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ArrowDownLeft16,
                        ArrowDownLeft16Directive
                    ],
                    exports: [
                        ArrowDownLeft16,
                        ArrowDownLeft16Directive
                    ]
                },] },
    ];
    return ArrowDownLeft16Module;
}());
export { ArrowDownLeft16Module };
//# sourceMappingURL=16.js.map