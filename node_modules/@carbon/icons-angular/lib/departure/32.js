import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var Departure32 = /** @class */ (function () {
    function Departure32() {
        this.focusable = false;
    }
    Departure32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-departure32",
                    template: "\n    <svg\n      ibmIconDeparture32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    Departure32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return Departure32;
}());
export { Departure32 };
var Departure32Directive = /** @class */ (function () {
    function Departure32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    Departure32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M2 28H30V30H2zM13.48 5.15l5.69 8.14.8 1.15 1.35-.36 4.52-1.21a2.13 2.13 0 0 1 1.12 0A1.84 1.84 0 0 1 28.23 14 1.87 1.87 0 0 1 27 16.45l-18.71 5a1.78 1.78 0 0 1-1 0A1.87 1.87 0 0 1 6 20.12l-.25-.93L5 16.38l-.74-2.74 1.44-.39L8 16.35l.81 1.08 1.31-.35 2.8-.75 1.94-.52-.52-1.93L12.08 5.52l1.4-.37M14.16 3a1.06 1.06 0 0 0-.5 0l-3.09.83A1 1 0 0 0 9.89 5l2.5 9.36-2.81.75L6.85 11.5a1 1 0 0 0-.52-.36 1.06 1.06 0 0 0-.5 0L2.72 12A1 1 0 0 0 2 13.16L3 16.9l.75 2.8.25.94a3.87 3.87 0 0 0 2.74 2.74 3.91 3.91 0 0 0 2 0l18.7-5a3.84 3.84 0 0 0 0-7.44 4.27 4.27 0 0 0-2.16 0l-4.51 1.21L14.7 3.41A1 1 0 0 0 14.16 3z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            Departure32Directive.titleIdCounter++;
            title.setAttribute("id", "departure32-" + Departure32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "departure32-" + Departure32Directive.titleIdCounter);
        }
    };
    Departure32Directive.titleIdCounter = 0;
    Departure32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconDeparture32]"
                },] },
    ];
    /** @nocollapse */
    Departure32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    Departure32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return Departure32Directive;
}());
export { Departure32Directive };
var Departure32Module = /** @class */ (function () {
    function Departure32Module() {
    }
    Departure32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        Departure32,
                        Departure32Directive
                    ],
                    exports: [
                        Departure32,
                        Departure32Directive
                    ]
                },] },
    ];
    return Departure32Module;
}());
export { Departure32Module };
//# sourceMappingURL=32.js.map