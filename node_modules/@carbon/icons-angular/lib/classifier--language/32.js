import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var ClassifierLanguage32 = /** @class */ (function () {
    function ClassifierLanguage32() {
        this.focusable = false;
    }
    ClassifierLanguage32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-classifier-language32",
                    template: "\n    <svg\n      ibmIconClassifierLanguage32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    ClassifierLanguage32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return ClassifierLanguage32;
}());
export { ClassifierLanguage32 };
var ClassifierLanguage32Directive = /** @class */ (function () {
    function ClassifierLanguage32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    ClassifierLanguage32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M30 10V2H22v8h3v4H23v2h7V14H27V10zM24 4h4V8H24zM20 23.41L18.59 22 16 24.59 13.41 22 12 23.41 14.59 26 12 28.59 13.41 30 16 27.41 18.59 30 20 28.59 17.41 26 20 23.41zM20 14L12 14 12 16 15 16 15 21 17 21 17 16 20 16 20 14zM7 9.86a4 4 0 1 0-2 0V14H2v2H9V14H7zM4 6A2 2 0 1 1 6 8 2 2 0 0 1 4 6z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            ClassifierLanguage32Directive.titleIdCounter++;
            title.setAttribute("id", "classifier-language32-" + ClassifierLanguage32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "classifier-language32-" + ClassifierLanguage32Directive.titleIdCounter);
        }
    };
    ClassifierLanguage32Directive.titleIdCounter = 0;
    ClassifierLanguage32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconClassifierLanguage32]"
                },] },
    ];
    /** @nocollapse */
    ClassifierLanguage32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ClassifierLanguage32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return ClassifierLanguage32Directive;
}());
export { ClassifierLanguage32Directive };
var ClassifierLanguage32Module = /** @class */ (function () {
    function ClassifierLanguage32Module() {
    }
    ClassifierLanguage32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ClassifierLanguage32,
                        ClassifierLanguage32Directive
                    ],
                    exports: [
                        ClassifierLanguage32,
                        ClassifierLanguage32Directive
                    ]
                },] },
    ];
    return ClassifierLanguage32Module;
}());
export { ClassifierLanguage32Module };
//# sourceMappingURL=32.js.map