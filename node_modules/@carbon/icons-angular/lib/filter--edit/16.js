import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var FilterEdit16 = /** @class */ (function () {
    function FilterEdit16() {
        this.focusable = false;
    }
    FilterEdit16.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-filter-edit16",
                    template: "\n    <svg\n      ibmIconFilterEdit16\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    FilterEdit16.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return FilterEdit16;
}());
export { FilterEdit16 };
var FilterEdit16Directive = /** @class */ (function () {
    function FilterEdit16Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    FilterEdit16Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M26,6H4V9.17l7.41,7.42.59.58V26h4V24h2v2a2,2,0,0,1-2,2H12a2,2,0,0,1-2-2V18L2.59,10.59A2,2,0,0,1,2,9.17V6A2,2,0,0,1,4,4H26Z\"></path><path d=\"M29.71,11.29l-3-3a1,1,0,0,0-1.42,0L16,17.59V22h4.41l9.3-9.29A1,1,0,0,0,29.71,11.29ZM19.59,20H18V18.41l5-5L24.59,15ZM26,13.59,24.41,12,26,10.41,27.59,12Z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 16,
            height: 16,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            FilterEdit16Directive.titleIdCounter++;
            title.setAttribute("id", "filter-edit16-" + FilterEdit16Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "filter-edit16-" + FilterEdit16Directive.titleIdCounter);
        }
    };
    FilterEdit16Directive.titleIdCounter = 0;
    FilterEdit16Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconFilterEdit16]"
                },] },
    ];
    /** @nocollapse */
    FilterEdit16Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FilterEdit16Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return FilterEdit16Directive;
}());
export { FilterEdit16Directive };
var FilterEdit16Module = /** @class */ (function () {
    function FilterEdit16Module() {
    }
    FilterEdit16Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FilterEdit16,
                        FilterEdit16Directive
                    ],
                    exports: [
                        FilterEdit16,
                        FilterEdit16Directive
                    ]
                },] },
    ];
    return FilterEdit16Module;
}());
export { FilterEdit16Module };
//# sourceMappingURL=16.js.map