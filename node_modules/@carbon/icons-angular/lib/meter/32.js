import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var Meter32 = /** @class */ (function () {
    function Meter32() {
        this.focusable = false;
    }
    Meter32.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-meter32",
                    template: "\n    <svg\n      ibmIconMeter32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    Meter32.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return Meter32;
}());
export { Meter32 };
var Meter32Directive = /** @class */ (function () {
    function Meter32Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    Meter32Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M26 16a9.9283 9.9283 0 0 0-1.1392-4.6182l-1.4961 1.4961A7.9483 7.9483 0 0 1 24 16zM23.4141 10L22 8.5859l-4.7147 4.7147A2.9659 2.9659 0 0 0 16 13a3 3 0 1 0 3 3 2.9659 2.9659 0 0 0-.3006-1.2853zM16 17a1 1 0 1 1 1-1A1.0013 1.0013 0 0 1 16 17zM16 8a7.9515 7.9515 0 0 1 3.1223.6353l1.4961-1.4961A9.9864 9.9864 0 0 0 6 16H8A8.0092 8.0092 0 0 1 16 8z\"></path><path d=\"M16,30A14,14,0,1,1,30,16,14.0158,14.0158,0,0,1,16,30ZM16,4A12,12,0,1,0,28,16,12.0137,12.0137,0,0,0,16,4Z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 32,
            height: 32,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            Meter32Directive.titleIdCounter++;
            title.setAttribute("id", "meter32-" + Meter32Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "meter32-" + Meter32Directive.titleIdCounter);
        }
    };
    Meter32Directive.titleIdCounter = 0;
    Meter32Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconMeter32]"
                },] },
    ];
    /** @nocollapse */
    Meter32Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    Meter32Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return Meter32Directive;
}());
export { Meter32Directive };
var Meter32Module = /** @class */ (function () {
    function Meter32Module() {
    }
    Meter32Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        Meter32,
                        Meter32Directive
                    ],
                    exports: [
                        Meter32,
                        Meter32Directive
                    ]
                },] },
    ];
    return Meter32Module;
}());
export { Meter32Module };
//# sourceMappingURL=32.js.map