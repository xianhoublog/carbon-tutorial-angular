(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var WatsonMachineLearning32 = /** @class */ (function () {
        function WatsonMachineLearning32() {
            this.focusable = false;
        }
        WatsonMachineLearning32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-watson-machine-learning32",
                        template: "\n    <svg\n      ibmIconWatsonMachineLearning32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        WatsonMachineLearning32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return WatsonMachineLearning32;
    }());
    var WatsonMachineLearning32Directive = /** @class */ (function () {
        function WatsonMachineLearning32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        WatsonMachineLearning32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M22 26H20V17.76l-3.23 3.88a1 1 0 0 1-1.54 0L12 17.76V26H10V15a1 1 0 0 1 .66-.94 1 1 0 0 1 1.11.3L16 19.44l4.23-5.08a1 1 0 0 1 1.11-.3A1 1 0 0 1 22 15zM4.16 14.65l-3-1.75a.76.76 0 1 0-.76 1.32L3.4 16a.76.76 0 1 0 .76-1.31zM8.29 10.52a.73.73 0 0 0 1 .27.75.75 0 0 0 .28-1l-1.74-3a.76.76 0 1 0-1.32.76zM16 9a.76.76 0 0 0 .76-.76V4.76a.76.76 0 1 0-1.52 0V8.25A.76.76 0 0 0 16 9zM22.68 10.79a.75.75 0 0 0 .37.11.76.76 0 0 0 .66-.38l1.75-3a.76.76 0 0 0-1.32-.76l-1.74 3A.75.75 0 0 0 22.68 10.79zM31.9 13.18a.76.76 0 0 0-1-.28l-3 1.75A.76.76 0 0 0 28.6 16l3-1.74A.77.77 0 0 0 31.9 13.18z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                WatsonMachineLearning32Directive.titleIdCounter++;
                title.setAttribute("id", "watson-machine-learning32-" + WatsonMachineLearning32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "watson-machine-learning32-" + WatsonMachineLearning32Directive.titleIdCounter);
            }
        };
        WatsonMachineLearning32Directive.titleIdCounter = 0;
        WatsonMachineLearning32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconWatsonMachineLearning32]"
                    },] },
        ];
        /** @nocollapse */
        WatsonMachineLearning32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        WatsonMachineLearning32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return WatsonMachineLearning32Directive;
    }());
    var WatsonMachineLearning32Module = /** @class */ (function () {
        function WatsonMachineLearning32Module() {
        }
        WatsonMachineLearning32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            WatsonMachineLearning32,
                            WatsonMachineLearning32Directive
                        ],
                        exports: [
                            WatsonMachineLearning32,
                            WatsonMachineLearning32Directive
                        ]
                    },] },
        ];
        return WatsonMachineLearning32Module;
    }());

    exports.WatsonMachineLearning32 = WatsonMachineLearning32;
    exports.WatsonMachineLearning32Directive = WatsonMachineLearning32Directive;
    exports.WatsonMachineLearning32Module = WatsonMachineLearning32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
