(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var LogoPinterest32 = /** @class */ (function () {
        function LogoPinterest32() {
            this.focusable = false;
        }
        LogoPinterest32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-logo-pinterest32",
                        template: "\n    <svg\n      ibmIconLogoPinterest32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        LogoPinterest32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return LogoPinterest32;
    }());
    var LogoPinterest32Directive = /** @class */ (function () {
        function LogoPinterest32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        LogoPinterest32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M16,2a14,14,0,0,0-5.1,27,13.24,13.24,0,0,1,0-4l1.65-7A5.05,5.05,0,0,1,12.17,16c0-1.94,1.13-3.4,2.53-3.4a1.76,1.76,0,0,1,1.77,2c0,1.2-.76,3-1.16,4.66a2,2,0,0,0,2.08,2.53c2.48,0,4.4-2.63,4.4-6.41a5.53,5.53,0,0,0-5.85-5.7,6.06,6.06,0,0,0-6.32,6.08,5.42,5.42,0,0,0,1,3.19.44.44,0,0,1,.1.4c-.11.44-.35,1.4-.39,1.59s-.21.31-.47.19c-1.75-.82-2.84-3.37-2.84-5.43,0-4.41,3.21-8.47,9.25-8.47,4.85,0,8.63,3.46,8.63,8.09,0,4.82-3,8.7-7.27,8.7a3.76,3.76,0,0,1-3.21-1.6l-.87,3.33a15.55,15.55,0,0,1-1.74,3.67A14.17,14.17,0,0,0,16,30,14,14,0,0,0,16,2\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                LogoPinterest32Directive.titleIdCounter++;
                title.setAttribute("id", "logo-pinterest32-" + LogoPinterest32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "logo-pinterest32-" + LogoPinterest32Directive.titleIdCounter);
            }
        };
        LogoPinterest32Directive.titleIdCounter = 0;
        LogoPinterest32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconLogoPinterest32]"
                    },] },
        ];
        /** @nocollapse */
        LogoPinterest32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        LogoPinterest32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return LogoPinterest32Directive;
    }());
    var LogoPinterest32Module = /** @class */ (function () {
        function LogoPinterest32Module() {
        }
        LogoPinterest32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            LogoPinterest32,
                            LogoPinterest32Directive
                        ],
                        exports: [
                            LogoPinterest32,
                            LogoPinterest32Directive
                        ]
                    },] },
        ];
        return LogoPinterest32Module;
    }());

    exports.LogoPinterest32 = LogoPinterest32;
    exports.LogoPinterest32Directive = LogoPinterest32Directive;
    exports.LogoPinterest32Module = LogoPinterest32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
