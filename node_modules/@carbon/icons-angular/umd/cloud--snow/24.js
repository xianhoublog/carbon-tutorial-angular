(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var CloudSnow24 = /** @class */ (function () {
        function CloudSnow24() {
            this.focusable = false;
        }
        CloudSnow24.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-cloud-snow24",
                        template: "\n    <svg\n      ibmIconCloudSnow24\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        CloudSnow24.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return CloudSnow24;
    }());
    var CloudSnow24Directive = /** @class */ (function () {
        function CloudSnow24Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        CloudSnow24Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M23.5 22H8.5A6.5 6.5 0 0 1 7.2 9.14a9 9 0 0 1 17.6 0A6.5 6.5 0 0 1 23.5 22zM16 4a7 7 0 0 0-6.94 6.14L9 11 8.14 11a4.5 4.5 0 0 0 .36 9h15a4.5 4.5 0 0 0 .36-9L23 11l-.1-.82A7 7 0 0 0 16 4zM12 25.05L10.95 24 9.5 25.45 8.05 24 7 25.05 8.45 26.5 7 27.95 8.05 29 9.5 27.55 10.95 29 12 27.95 10.55 26.5 12 25.05zM26 25.05L24.95 24 23.5 25.45 22.05 24 21 25.05 22.45 26.5 21 27.95 22.05 29 23.5 27.55 24.95 29 26 27.95 24.55 26.5 26 25.05zM19 27.05L17.95 26 16.5 27.45 15.05 26 14 27.05 15.45 28.5 14 29.95 15.05 31 16.5 29.55 17.95 31 19 29.95 17.55 28.5 19 27.05z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 24,
                height: 24,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                CloudSnow24Directive.titleIdCounter++;
                title.setAttribute("id", "cloud-snow24-" + CloudSnow24Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "cloud-snow24-" + CloudSnow24Directive.titleIdCounter);
            }
        };
        CloudSnow24Directive.titleIdCounter = 0;
        CloudSnow24Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconCloudSnow24]"
                    },] },
        ];
        /** @nocollapse */
        CloudSnow24Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        CloudSnow24Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return CloudSnow24Directive;
    }());
    var CloudSnow24Module = /** @class */ (function () {
        function CloudSnow24Module() {
        }
        CloudSnow24Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CloudSnow24,
                            CloudSnow24Directive
                        ],
                        exports: [
                            CloudSnow24,
                            CloudSnow24Directive
                        ]
                    },] },
        ];
        return CloudSnow24Module;
    }());

    exports.CloudSnow24 = CloudSnow24;
    exports.CloudSnow24Directive = CloudSnow24Directive;
    exports.CloudSnow24Module = CloudSnow24Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
