(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var Http20 = /** @class */ (function () {
        function Http20() {
            this.focusable = false;
        }
        Http20.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-http20",
                        template: "\n    <svg\n      ibmIconHttp20\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        Http20.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return Http20;
    }());
    var Http20Directive = /** @class */ (function () {
        function Http20Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        Http20Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M30 11H25V21h2V18h3a2.0027 2.0027 0 0 0 2-2V13A2.0023 2.0023 0 0 0 30 11zm-3 5V13h3l.001 3zM10 13L12 13 12 21 14 21 14 13 16 13 16 11 10 11 10 13zM23 11L17 11 17 13 19 13 19 21 21 21 21 13 23 13 23 11zM6 11L6 15 3 15 3 11 1 11 1 21 3 21 3 17 6 17 6 21 8 21 8 11 6 11z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 20,
                height: 20,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                Http20Directive.titleIdCounter++;
                title.setAttribute("id", "http20-" + Http20Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "http20-" + Http20Directive.titleIdCounter);
            }
        };
        Http20Directive.titleIdCounter = 0;
        Http20Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconHttp20]"
                    },] },
        ];
        /** @nocollapse */
        Http20Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        Http20Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return Http20Directive;
    }());
    var Http20Module = /** @class */ (function () {
        function Http20Module() {
        }
        Http20Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Http20,
                            Http20Directive
                        ],
                        exports: [
                            Http20,
                            Http20Directive
                        ]
                    },] },
        ];
        return Http20Module;
    }());

    exports.Http20 = Http20;
    exports.Http20Directive = Http20Directive;
    exports.Http20Module = Http20Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
