(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var PhoneOff32 = /** @class */ (function () {
        function PhoneOff32() {
            this.focusable = false;
        }
        PhoneOff32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-phone-off32",
                        template: "\n    <svg\n      ibmIconPhoneOff32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        PhoneOff32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return PhoneOff32;
    }());
    var PhoneOff32Directive = /** @class */ (function () {
        function PhoneOff32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        PhoneOff32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M9.19 18.56A25.66 25.66 0 0 1 5 6.08V6A1 1 0 0 1 6 5h5.28l1.5 3.77L9.94 11.64l.06.48a13 13 0 0 0 1.46 4.17l1.46-1.46a9.34 9.34 0 0 1-.84-2.52l2.13-2.15A2 2 0 0 0 14.65 8L13.13 4.26A2 2 0 0 0 11.27 3H5.76A3 3 0 0 0 3 6.23 28 28 0 0 0 7.79 20zM27.77 18.86L24 17.35a2 2 0 0 0-2.17.41l-2.17 2.15A9.17 9.17 0 0 1 15.45 18L30 3.41 28.59 2 2 28.59 3.41 30l7-7c3.38 3.18 8.28 5.62 15.39 6H26a3 3 0 0 0 3-3V20.72A2 2 0 0 0 27.77 18.86zM27 26v.06a1 1 0 0 1-1.06.94c-6.51-.37-11-2.54-14.11-5.42L14 19.44A10.77 10.77 0 0 0 19.88 22l.48.06 2.87-2.85L27 20.72z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                PhoneOff32Directive.titleIdCounter++;
                title.setAttribute("id", "phone-off32-" + PhoneOff32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "phone-off32-" + PhoneOff32Directive.titleIdCounter);
            }
        };
        PhoneOff32Directive.titleIdCounter = 0;
        PhoneOff32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconPhoneOff32]"
                    },] },
        ];
        /** @nocollapse */
        PhoneOff32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PhoneOff32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return PhoneOff32Directive;
    }());
    var PhoneOff32Module = /** @class */ (function () {
        function PhoneOff32Module() {
        }
        PhoneOff32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            PhoneOff32,
                            PhoneOff32Directive
                        ],
                        exports: [
                            PhoneOff32,
                            PhoneOff32Directive
                        ]
                    },] },
        ];
        return PhoneOff32Module;
    }());

    exports.PhoneOff32 = PhoneOff32;
    exports.PhoneOff32Directive = PhoneOff32Directive;
    exports.PhoneOff32Module = PhoneOff32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
