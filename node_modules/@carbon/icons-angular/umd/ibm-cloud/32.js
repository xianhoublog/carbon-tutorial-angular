(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var IbmCloud32 = /** @class */ (function () {
        function IbmCloud32() {
            this.focusable = false;
        }
        IbmCloud32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-ibm-cloud32",
                        template: "\n    <svg\n      ibmIconIbmCloud32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        IbmCloud32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return IbmCloud32;
    }());
    var IbmCloud32Directive = /** @class */ (function () {
        function IbmCloud32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        IbmCloud32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M24.5805 13.65A9.7327 9.7327 0 0 0 6.286 17.5387 6.75 6.75 0 0 0 7 31H23a8.7465 8.7465 0 0 0 1.5805-17.35zM23 29.5H7a5.2373 5.2373 0 0 1-.6993-10.4293 9.7265 9.7265 0 0 0 1.1036 3.7838.75.75 0 1 0 1.3213-.709A8.25 8.25 0 0 1 22.752 13.5133a8.754 8.754 0 0 0-6.315 2.95.75.75 0 1 0 1.1245.9922A7.25 7.25 0 1 1 23 29.5zM31.8983 10.2548a.7582.7582 0 0 0-1.0364-.2776l-3.02 1.7438A.7587.7587 0 1 0 28.6 13.035l3.02-1.7438A.7589.7589 0 0 0 31.8983 10.2548zM22.6764 7.87a.7583.7583 0 0 0 1.0364-.2776l1.7438-3.02a.7587.7587 0 0 0-1.314-.7588l-1.7438 3.02A.7588.7588 0 0 0 22.6764 7.87zM16 6.0811a.759.759 0 0 0 .7588-.7588V1.8347a.7588.7588 0 1 0-1.5175 0V5.3223A.7589.7589 0 0 0 16 6.0811zM8.2873 7.5922a.7587.7587 0 0 0 1.314-.7588l-1.7438-3.02a.7587.7587 0 1 0-1.314.7588zM4.1585 11.721l-3.02-1.7438a.7587.7587 0 1 0-.7588 1.314L3.4 13.035a.7587.7587 0 1 0 .7588-1.314z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                IbmCloud32Directive.titleIdCounter++;
                title.setAttribute("id", "ibm-cloud32-" + IbmCloud32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "ibm-cloud32-" + IbmCloud32Directive.titleIdCounter);
            }
        };
        IbmCloud32Directive.titleIdCounter = 0;
        IbmCloud32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconIbmCloud32]"
                    },] },
        ];
        /** @nocollapse */
        IbmCloud32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        IbmCloud32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return IbmCloud32Directive;
    }());
    var IbmCloud32Module = /** @class */ (function () {
        function IbmCloud32Module() {
        }
        IbmCloud32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            IbmCloud32,
                            IbmCloud32Directive
                        ],
                        exports: [
                            IbmCloud32,
                            IbmCloud32Directive
                        ]
                    },] },
        ];
        return IbmCloud32Module;
    }());

    exports.IbmCloud32 = IbmCloud32;
    exports.IbmCloud32Directive = IbmCloud32Directive;
    exports.IbmCloud32Module = IbmCloud32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
