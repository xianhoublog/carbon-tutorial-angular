(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var LogoQuora20 = /** @class */ (function () {
        function LogoQuora20() {
            this.focusable = false;
        }
        LogoQuora20.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-logo-quora20",
                        template: "\n    <svg\n      ibmIconLogoQuora20\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        LogoQuora20.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return LogoQuora20;
    }());
    var LogoQuora20Directive = /** @class */ (function () {
        function LogoQuora20Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        LogoQuora20Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M29,23.86H27a1.72,1.72,0,0,1-1.73,1.72c-1.15,0-1.82-.86-2.58-2a11,11,0,0,0,4.79-9.1c.09-7.19-5.85-11.89-12.17-11.89S3,7.37,3,14.37,9,26.16,15.17,26.16a10.71,10.71,0,0,0,3.07-.48c1.15,2.11,2.59,3.74,5.46,3.74A5,5,0,0,0,29,23.86Zm-8.14-3.45a6.31,6.31,0,0,0-5.56-3.16,6,6,0,0,0-3.74,1.15L12.2,20a2.56,2.56,0,0,1,.86-.1c1.82,0,3,1.53,4.12,3.64a7.58,7.58,0,0,1-1.91.19C10.86,23.76,9,20.6,9,14.47s1.91-9.3,6.23-9.3,6.32,3.16,6.32,9.3A20.68,20.68,0,0,1,20.83,20.41Z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 20,
                height: 20,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                LogoQuora20Directive.titleIdCounter++;
                title.setAttribute("id", "logo-quora20-" + LogoQuora20Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "logo-quora20-" + LogoQuora20Directive.titleIdCounter);
            }
        };
        LogoQuora20Directive.titleIdCounter = 0;
        LogoQuora20Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconLogoQuora20]"
                    },] },
        ];
        /** @nocollapse */
        LogoQuora20Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        LogoQuora20Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return LogoQuora20Directive;
    }());
    var LogoQuora20Module = /** @class */ (function () {
        function LogoQuora20Module() {
        }
        LogoQuora20Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            LogoQuora20,
                            LogoQuora20Directive
                        ],
                        exports: [
                            LogoQuora20,
                            LogoQuora20Directive
                        ]
                    },] },
        ];
        return LogoQuora20Module;
    }());

    exports.LogoQuora20 = LogoQuora20;
    exports.LogoQuora20Directive = LogoQuora20Directive;
    exports.LogoQuora20Module = LogoQuora20Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
