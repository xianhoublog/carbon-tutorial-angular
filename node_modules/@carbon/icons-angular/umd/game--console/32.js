(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var GameConsole32 = /** @class */ (function () {
        function GameConsole32() {
            this.focusable = false;
        }
        GameConsole32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-game-console32",
                        template: "\n    <svg\n      ibmIconGameConsole32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        GameConsole32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return GameConsole32;
    }());
    var GameConsole32Directive = /** @class */ (function () {
        function GameConsole32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        GameConsole32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M7.51,26a5.48,5.48,0,0,1-1.44-.19A5.6,5.6,0,0,1,2.19,19l2.33-8.84A5.54,5.54,0,0,1,7.11,6.73a5.43,5.43,0,0,1,4.15-.54A5.52,5.52,0,0,1,14.7,9h2.6a5.49,5.49,0,0,1,3.44-2.81,5.43,5.43,0,0,1,4.15.54,5.57,5.57,0,0,1,2.59,3.41L29.81,19a5.6,5.6,0,0,1-3.89,6.83,5.43,5.43,0,0,1-4.15-.54,5.54,5.54,0,0,1-2.59-3.41L19,21H13l-.23.86a5.54,5.54,0,0,1-2.59,3.41A5.46,5.46,0,0,1,7.51,26ZM9.83,8a3.49,3.49,0,0,0-1.72.46,3.6,3.6,0,0,0-1.66,2.19L4.12,19.49A3.6,3.6,0,0,0,6.6,23.88a3.43,3.43,0,0,0,2.62-.34,3.54,3.54,0,0,0,1.66-2.19L11.5,19h9l.61,2.35a3.58,3.58,0,0,0,1.66,2.19,3.46,3.46,0,0,0,2.63.34,3.58,3.58,0,0,0,2.47-4.39l-2.33-8.84a3.55,3.55,0,0,0-1.65-2.19,3.46,3.46,0,0,0-2.63-.34,3.55,3.55,0,0,0-2.37,2.22l-.24.66h-5.3l-.24-.66a3.56,3.56,0,0,0-2.38-2.22A3.48,3.48,0,0,0,9.83,8Z\"></path><path d=\"M10,16a2,2,0,1,1,2-2A2,2,0,0,1,10,16Zm0-2Z\"></path><circle cx=\"22\" cy=\"12\" r=\"1\"></circle><circle cx=\"22\" cy=\"16\" r=\"1\"></circle><circle cx=\"20\" cy=\"14\" r=\"1\"></circle><circle cx=\"24\" cy=\"14\" r=\"1\"></circle></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                GameConsole32Directive.titleIdCounter++;
                title.setAttribute("id", "game-console32-" + GameConsole32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "game-console32-" + GameConsole32Directive.titleIdCounter);
            }
        };
        GameConsole32Directive.titleIdCounter = 0;
        GameConsole32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconGameConsole32]"
                    },] },
        ];
        /** @nocollapse */
        GameConsole32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        GameConsole32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return GameConsole32Directive;
    }());
    var GameConsole32Module = /** @class */ (function () {
        function GameConsole32Module() {
        }
        GameConsole32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            GameConsole32,
                            GameConsole32Directive
                        ],
                        exports: [
                            GameConsole32,
                            GameConsole32Directive
                        ]
                    },] },
        ];
        return GameConsole32Module;
    }());

    exports.GameConsole32 = GameConsole32;
    exports.GameConsole32Directive = GameConsole32Directive;
    exports.GameConsole32Module = GameConsole32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
