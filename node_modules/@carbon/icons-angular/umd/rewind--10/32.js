(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var Rewind_1032 = /** @class */ (function () {
        function Rewind_1032() {
            this.focusable = false;
        }
        Rewind_1032.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-rewind-1032",
                        template: "\n    <svg\n      ibmIconRewind_1032\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        Rewind_1032.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return Rewind_1032;
    }());
    var Rewind_1032Directive = /** @class */ (function () {
        function Rewind_1032Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        Rewind_1032Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4,18A12,12,0,1,0,16,6H12V1L6,7l6,6V8h4A10,10,0,1,1,6,18Z\"></path><path d=\"M19.63 22.13a2.84 2.84 0 0 1-1.28-.27 2.44 2.44 0 0 1-.89-.77 3.57 3.57 0 0 1-.52-1.25 7.69 7.69 0 0 1-.17-1.68 7.83 7.83 0 0 1 .17-1.68 3.65 3.65 0 0 1 .52-1.25 2.44 2.44 0 0 1 .89-.77 2.84 2.84 0 0 1 1.28-.27 2.44 2.44 0 0 1 2.16 1 5.23 5.23 0 0 1 .7 2.93 5.23 5.23 0 0 1-.7 2.93A2.44 2.44 0 0 1 19.63 22.13zm0-1.22a1.07 1.07 0 0 0 1-.55A3.38 3.38 0 0 0 21 18.85V17.47a3.31 3.31 0 0 0-.29-1.5 1.23 1.23 0 0 0-2.06 0 3.31 3.31 0 0 0-.29 1.5v1.38a3.38 3.38 0 0 0 .29 1.51A1.06 1.06 0 0 0 19.63 20.91zM10.63 22V20.82h2V15.63l-1.86 1-.55-1.06 2.32-1.3H14v6.5h1.78V22z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                Rewind_1032Directive.titleIdCounter++;
                title.setAttribute("id", "rewind-1032-" + Rewind_1032Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "rewind-1032-" + Rewind_1032Directive.titleIdCounter);
            }
        };
        Rewind_1032Directive.titleIdCounter = 0;
        Rewind_1032Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconRewind_1032]"
                    },] },
        ];
        /** @nocollapse */
        Rewind_1032Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        Rewind_1032Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return Rewind_1032Directive;
    }());
    var Rewind_1032Module = /** @class */ (function () {
        function Rewind_1032Module() {
        }
        Rewind_1032Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Rewind_1032,
                            Rewind_1032Directive
                        ],
                        exports: [
                            Rewind_1032,
                            Rewind_1032Directive
                        ]
                    },] },
        ];
        return Rewind_1032Module;
    }());

    exports.Rewind_1032 = Rewind_1032;
    exports.Rewind_1032Directive = Rewind_1032Directive;
    exports.Rewind_1032Module = Rewind_1032Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
