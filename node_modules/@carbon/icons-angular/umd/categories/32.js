(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var Categories32 = /** @class */ (function () {
        function Categories32() {
            this.focusable = false;
        }
        Categories32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-categories32",
                        template: "\n    <svg\n      ibmIconCategories32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        Categories32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return Categories32;
    }());
    var Categories32Directive = /** @class */ (function () {
        function Categories32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        Categories32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M6.76 6l.45.89L7.76 8H12v5H4V6H6.76m.62-2H3A1 1 0 0 0 2 5v9a1 1 0 0 0 1 1H13a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H9L8.28 4.55A1 1 0 0 0 7.38 4zM22.76 6l.45.89L23.76 8H28v5H20V6h2.76m.62-2H19a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1H29a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H25l-.72-1.45a1 1 0 0 0-.9-.55zM6.76 19l.45.89L7.76 21H12v5H4V19H6.76m.62-2H3a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1H13a1 1 0 0 0 1-1V20a1 1 0 0 0-1-1H9l-.72-1.45a1 1 0 0 0-.9-.55zM22.76 19l.45.89L23.76 21H28v5H20V19h2.76m.62-2H19a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1H29a1 1 0 0 0 1-1V20a1 1 0 0 0-1-1H25l-.72-1.45a1 1 0 0 0-.9-.55z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                Categories32Directive.titleIdCounter++;
                title.setAttribute("id", "categories32-" + Categories32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "categories32-" + Categories32Directive.titleIdCounter);
            }
        };
        Categories32Directive.titleIdCounter = 0;
        Categories32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconCategories32]"
                    },] },
        ];
        /** @nocollapse */
        Categories32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        Categories32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return Categories32Directive;
    }());
    var Categories32Module = /** @class */ (function () {
        function Categories32Module() {
        }
        Categories32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Categories32,
                            Categories32Directive
                        ],
                        exports: [
                            Categories32,
                            Categories32Directive
                        ]
                    },] },
        ];
        return Categories32Module;
    }());

    exports.Categories32 = Categories32;
    exports.Categories32Directive = Categories32Directive;
    exports.Categories32Module = Categories32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
